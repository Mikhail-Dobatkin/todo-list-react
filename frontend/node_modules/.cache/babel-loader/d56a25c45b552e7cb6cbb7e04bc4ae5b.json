{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todo-form/todo-form-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TodoService from '../../service/todoService/TodoService';\nimport { TodoFormComponent } from './todo-form-component';\nimport { createBook } from '../../store/action-creators/todo';\nimport './style.css';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoFormContainer = _ref => {\n  _s();\n\n  let {\n    newTaskHandler\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useDispatch();\n\n  const createTodo = async body => {\n    try {\n      const todo = await TodoService.createNewTodo(body);\n      newTaskHandler(todo);\n    } catch (e) {\n      console.log('Error in function createTask', e);\n    }\n  };\n\n  const setInputValueHandler = e => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n\n  const todoSubmit = async e => {\n    e.preventDefault();\n\n    if (inputValue.trim() === '') {\n      return;\n    }\n\n    const body = {\n      title: inputValue,\n      isCheck: false\n    };\n    dispatch(createBook(body));\n\n    try {\n      await createTodo(body);\n      setInputValue('');\n    } catch (e) {\n      console.log('Error in function createTask');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodoFormComponent, {\n    inputValue: inputValue,\n    setInputValueHandler: setInputValueHandler,\n    todoSubmit: todoSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TodoFormContainer, \"oJ2OWRKCjZXQYfrfZJEWXG+vXVU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodoFormContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoFormContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todo-form/todo-form-container.tsx"],"names":["React","useState","TodoService","TodoFormComponent","createBook","useDispatch","TodoFormContainer","newTaskHandler","inputValue","setInputValue","dispatch","createTodo","body","todo","createNewTodo","e","console","log","setInputValueHandler","value","target","todoSubmit","preventDefault","trim","title","isCheck"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AAEA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,OAAO,aAAP;AACA,SAASC,WAAT,QAAyC,aAAzC;;AAMA,OAAO,MAAMC,iBAAiB,GAAG,QAAmD;AAAA;;AAAA,MAAlD;AAAEC,IAAAA;AAAF,GAAkD;AAClF,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAS,EAAT,CAA5C;AACA,QAAMS,QAAQ,GAAGL,WAAW,EAA5B;;AAEA,QAAMM,UAAU,GAAG,MAAOC,IAAP,IAAuB;AACxC,QAAI;AACF,YAAMC,IAAW,GAAG,MAAMX,WAAW,CAACY,aAAZ,CAA0BF,IAA1B,CAA1B;AACAL,MAAAA,cAAc,CAACM,IAAD,CAAd;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C;AACD;AACF,GAPD;;AASA,QAAMG,oBAAoB,GAAIH,CAAD,IAA4C;AACvE,UAAMI,KAAK,GAAGJ,CAAC,CAACK,MAAF,CAASD,KAAvB;AACAV,IAAAA,aAAa,CAACU,KAAD,CAAb;AACD,GAHD;;AAKA,QAAME,UAAU,GAAG,MAAON,CAAP,IAAkD;AACnEA,IAAAA,CAAC,CAACO,cAAF;;AAEA,QAAId,UAAU,CAACe,IAAX,OAAsB,EAA1B,EAA8B;AAC5B;AACD;;AAED,UAAMX,IAAW,GAAG;AAClBY,MAAAA,KAAK,EAAEhB,UADW;AAElBiB,MAAAA,OAAO,EAAE;AAFS,KAApB;AAIAf,IAAAA,QAAQ,CAACN,UAAU,CAACQ,IAAD,CAAX,CAAR;;AACA,QAAI;AACF,YAAMD,UAAU,CAACC,IAAD,CAAhB;AACAH,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAHD,CAGE,OAAOM,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACF,GAlBD;;AAoBA,sBACO,QAAC,iBAAD;AACG,IAAA,UAAU,EAAET,UADf;AAEG,IAAA,oBAAoB,EAAEU,oBAFzB;AAGG,IAAA,UAAU,EAAEG;AAHf;AAAA;AAAA;AAAA;AAAA,UADP;AAOD,CA7CM;;GAAMf,iB;UAEMD,W;;;KAFNC,iB","sourcesContent":["import React, { FC, useState } from 'react'\nimport TodoService from '../../service/todoService/TodoService'\nimport { ITodo } from '../../models/interface/interface'\nimport { TodoFormComponent } from './todo-form-component'\nimport { createBook } from '../../store/action-creators/todo'\nimport './style.css'\nimport { useDispatch, useSelector } from 'react-redux'\n\ninterface TodoFormProp {\n    newTaskHandler: (task: ITodo) => void\n}\n\nexport const TodoFormContainer = ({ newTaskHandler }: TodoFormProp): JSX.Element => {\n  const [inputValue, setInputValue] = useState<string>('')\n  const dispatch = useDispatch()\n\n  const createTodo = async (body: ITodo) => {\n    try {\n      const todo: ITodo = await TodoService.createNewTodo(body)\n      newTaskHandler(todo)\n    } catch (e) {\n      console.log('Error in function createTask', e)\n    }\n  }\n\n  const setInputValueHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    setInputValue(value)\n  }\n\n  const todoSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n\n    if (inputValue.trim() === '') {\n      return\n    }\n\n    const body: ITodo = {\n      title: inputValue,\n      isCheck: false\n    }\n    dispatch(createBook(body))\n    try {\n      await createTodo(body)\n      setInputValue('')\n    } catch (e) {\n      console.log('Error in function createTask')\n    }\n  }\n\n  return (\n         <TodoFormComponent\n            inputValue={inputValue}\n            setInputValueHandler={setInputValueHandler}\n            todoSubmit={todoSubmit}\n         />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}