{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\";\nimport React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = () => {\n  // const [todos, setTodos] = useState<ITask[]>([])\n  //\n  // const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n  // const [indexTodoChanged, setTodoId] = useState<string>('')\n  //\n  // const fetchTodos = async (): Promise<void> => {\n  //     try {\n  //         //todo typisation utility types\n  //         const getTodos: any = await TodoService.getAllTodos()\n  //         console.log(getTodos)\n  //         setTodos(getTodos)\n  //     } catch (e) {\n  //         console.log('Error in fetchTodos', e)\n  //     }\n  // }\n  //\n  // useEffect( () => {\n  //     fetchTodos()\n  // }, [])\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const changeTodoHandler = (changeTodo, id) => {\n    todos.map((todo, index) => {\n      if (id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...todos];\n        setTodos(arr);\n      } else {\n        console.log('не сработало');\n      }\n    });\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const btnTodoRemove = async event => {\n    event.preventDefault();\n\n    if (\"id\" in event.target) {\n      const id = event.target.id;\n\n      try {\n        await deleteTodo(id);\n      } catch (e) {\n        console.log('Error in function deleteTodo', e);\n      }\n\n      console.log(id);\n    }\n  }; //todo get todo id instead of event\n\n\n  const btnEditTodo = e => {\n    e.preventDefault();\n\n    if ('id' in e.target) {\n      const id = e.target.id;\n      todos.forEach(todo => {\n        if (todo._id === id) {\n          const value = todo.title;\n          prevTodoValue(id, value);\n          setTodoTitlePrev(value);\n          setTodoId(id);\n        }\n      });\n    }\n  }; // const prevTodoValue = (id: string, value: string) => {\n  //     const body = {\n  //         _id: id,\n  //         title: value\n  //     }\n  //     console.log(body)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      prevValue: prevValueTitle,\n      indexTodoChanged: indexTodoChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","newTaskHandler","newTask","setTodos","todos","changeTodoHandler","changeTodo","id","map","todo","index","_id","prevArr","splice","arr","console","log","deleteTodo","newArrTodos","filter","task","e","btnTodoRemove","event","preventDefault","target","btnEditTodo","forEach","value","title","prevTodoValue","setTodoTitlePrev","setTodoId","prevValueTitle","indexTodoChanged"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\n\nconst TodosContainer = (): JSX.Element => {\n\n    // const [todos, setTodos] = useState<ITask[]>([])\n    //\n    // const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    // const [indexTodoChanged, setTodoId] = useState<string>('')\n    //\n    // const fetchTodos = async (): Promise<void> => {\n    //     try {\n    //         //todo typisation utility types\n    //         const getTodos: any = await TodoService.getAllTodos()\n    //         console.log(getTodos)\n    //         setTodos(getTodos)\n    //     } catch (e) {\n    //         console.log('Error in fetchTodos', e)\n    //     }\n    // }\n    //\n    // useEffect( () => {\n    //     fetchTodos()\n    // }, [])\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const changeTodoHandler = (changeTodo: ITask, id: string) => {\n       todos.map((todo, index) => {\n           if(id === todo._id) {\n               const prevArr = todos.splice(index, 1, changeTodo)\n               const arr = [...todos]\n               setTodos(arr)\n           } else {\n               console.log('не сработало')\n           }\n       })\n    }\n\n    const deleteTodo = async (id: string): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n               return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    const btnTodoRemove = async (event: Event) => {\n        event.preventDefault()\n        if (\"id\" in event.target) {\n            const id = event.target.id\n            try {\n                await deleteTodo(id)\n            } catch (e) {\n                console.log('Error in function deleteTodo', e)\n            }\n            console.log(id)\n        }\n    }\n\n    //todo get todo id instead of event\n    const btnEditTodo = (e: Event) => {\n        e.preventDefault()\n        if('id' in e.target) {\n            const id = e.target.id\n            todos.forEach(todo => {\n                if (todo._id === id) {\n                    const value = todo.title\n                    prevTodoValue(id, value)\n                    setTodoTitlePrev(value)\n                    setTodoId(id)\n                }\n            })\n        }\n    }\n\n    // const prevTodoValue = (id: string, value: string) => {\n    //     const body = {\n    //         _id: id,\n    //         title: value\n    //     }\n    //     console.log(body)\n    // }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} prevValue={prevValueTitle} indexTodoChanged={indexTodoChanged}/>\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}