{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todo-form/todo-form-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { TodoFormComponent } from \"./todo-form-component\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoFormContainer = _ref => {\n  _s();\n\n  let {\n    newTaskHandler\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n\n  const createTodo = async body => {\n    try {\n      const todo = await TodoService.createNewTodo(body);\n      newTaskHandler(todo);\n    } catch (e) {\n      console.log('Error in function createTask', e);\n    }\n  }; //todo clear input value if creating is success\n\n\n  const setInputValueHandler = e => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n\n  const btnTodoSubmit = async e => {\n    e.preventDefault();\n\n    if (inputValue.trim() === '') {\n      return;\n    }\n\n    const body = {\n      title: inputValue,\n      isCheck: false\n    };\n\n    try {\n      await createTodo(body);\n    } catch (e) {\n      console.log('Error in function createTask');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodoFormComponent, {\n    setInputValueHandler: setInputValueHandler,\n    btnTodoSubmit: btnTodoSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TodoFormContainer, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n\n_c = TodoFormContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoFormContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todo-form/todo-form-container.tsx"],"names":["React","useState","TodoService","TodoFormComponent","TodoFormContainer","newTaskHandler","inputValue","setInputValue","createTodo","body","todo","createNewTodo","e","console","log","setInputValueHandler","value","target","btnTodoSubmit","preventDefault","trim","title","isCheck"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AAEA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAO,aAAP;;AAMA,OAAO,MAAMC,iBAAiB,GAAG,QAAsC;AAAA;;AAAA,MAArC;AAAEC,IAAAA;AAAF,GAAqC;AAEnE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMO,UAAU,GAAG,MAAOC,IAAP,IAAuB;AACtC,QAAI;AACA,YAAMC,IAAW,GAAG,MAAMR,WAAW,CAACS,aAAZ,CAA0BF,IAA1B,CAA1B;AACAJ,MAAAA,cAAc,CAACK,IAAD,CAAd;AACH,KAHD,CAGE,OAAOE,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C;AACH;AACJ,GAPD,CAJmE,CAcnE;;;AACA,QAAMG,oBAAoB,GAAIH,CAAD,IAA4C;AACrE,UAAMI,KAAK,GAAGJ,CAAC,CAACK,MAAF,CAASD,KAAvB;AACAT,IAAAA,aAAa,CAACS,KAAD,CAAb;AACH,GAHD;;AAKA,QAAME,aAAa,GAAG,MAAON,CAAP,IAAkD;AACpEA,IAAAA,CAAC,CAACO,cAAF;;AAEA,QAAIb,UAAU,CAACc,IAAX,OAAsB,EAA1B,EAA8B;AAC1B;AACH;;AAED,UAAMX,IAAW,GAAG;AAChBY,MAAAA,KAAK,EAAEf,UADS;AAEhBgB,MAAAA,OAAO,EAAE;AAFO,KAApB;;AAKA,QAAI;AACA,YAAMd,UAAU,CAACC,IAAD,CAAhB;AACH,KAFD,CAEE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH;AACJ,GAjBD;;AAmBA,sBACK,QAAC,iBAAD;AACG,IAAA,oBAAoB,EAAEC,oBADzB;AAEG,IAAA,aAAa,EAAEG;AAFlB;AAAA;AAAA;AAAA;AAAA,UADL;AAMH,CA7CM;;GAAMd,iB;;KAAAA,iB","sourcesContent":["import React, { useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { ITodo } from \"../../models/interface/interface\";\nimport { TodoFormComponent } from \"./todo-form-component\";\nimport './style.css'\n\ninterface TodoFormProp {\n    newTaskHandler: (task: ITodo) => void\n}\n\nexport const TodoFormContainer = ({ newTaskHandler }: TodoFormProp) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const createTodo = async (body: ITodo) => {\n        try {\n            const todo: ITodo = await TodoService.createNewTodo(body)\n            newTaskHandler(todo)\n        } catch (e) {\n            console.log('Error in function createTask', e)\n        }\n    }\n\n\n    //todo clear input value if creating is success\n    const setInputValueHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value\n        setInputValue(value)\n    }\n\n    const btnTodoSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        if (inputValue.trim() === '') {\n            return;\n        }\n\n        const body: ITodo = {\n            title: inputValue,\n            isCheck: false\n        }\n\n        try {\n            await createTodo(body)\n        } catch (e) {\n            console.log('Error in function createTask')\n        }\n    }\n\n    return (\n         <TodoFormComponent\n            setInputValueHandler={setInputValueHandler}\n            btnTodoSubmit={btnTodoSubmit}\n         />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}