{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState('');\n\n  const fetchTodos = async () => {\n    try {\n      //todo typisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos);\n      setTodos(getTodos);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const changeTodoHandler = (changeTodo, id) => {\n    todos.map((todo, index) => {\n      if (id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...todos];\n        setTodos(arr);\n      } else {\n        console.log('не сработало');\n      }\n    });\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MainContainer, \"FowD4Gq/BEjfPQS+x70iHq3GuIs=\");\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["useState","TodosContainer","TodoService","MainContainer","todos","setTodos","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","fetchTodos","getTodos","getAllTodos","console","log","e","newTaskHandler","newTask","changeTodoHandler","changeTodo","id","map","todo","index","_id","prevArr","splice","arr","deleteTodo","newArrTodos","filter","task"],"mappings":";;;AAAA,SAAmBA,QAAnB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAOC,WAAP,MAAwB,uCAAxB;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAmB;AAAA;;AAE5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAU,EAAV,CAAlC;AAEA,QAAM,CAACM,cAAD,EAAiBC,gBAAjB,IAAqCP,QAAQ,CAAS,EAAT,CAAnD;AACA,QAAM,CAACQ,gBAAD,EAAmBC,SAAnB,IAAgCT,QAAQ,CAAS,EAAT,CAA9C;;AAEA,QAAMU,UAAU,GAAG,YAA2B;AAC1C,QAAI;AACA;AACA,YAAMC,QAAa,GAAG,MAAMT,WAAW,CAACU,WAAZ,EAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAN,MAAAA,QAAQ,CAACM,QAAD,CAAR;AACH,KALD,CAKE,OAAOI,CAAP,EAAU;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,CAAnC;AACH;AACJ,GATD;;AAYA,QAAMC,cAAc,GAAIC,OAAD,IAAoB;AACvCZ,IAAAA,QAAQ,CAAC,CAACY,OAAD,EAAU,GAAGb,KAAb,CAAD,CAAR;AACH,GAFD;;AAIA,QAAMc,iBAAiB,GAAG,CAACC,UAAD,EAAoBC,EAApB,KAAmC;AACzDhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvB,UAAGH,EAAE,KAAKE,IAAI,CAACE,GAAf,EAAoB;AAChB,cAAMC,OAAO,GAAGrB,KAAK,CAACsB,MAAN,CAAaH,KAAb,EAAoB,CAApB,EAAuBJ,UAAvB,CAAhB;AACA,cAAMQ,GAAG,GAAG,CAAC,GAAGvB,KAAJ,CAAZ;AACAC,QAAAA,QAAQ,CAACsB,GAAD,CAAR;AACH,OAJD,MAIO;AACHd,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ,KARD;AASH,GAVD;;AAYA,QAAMc,UAAU,GAAG,MAAOR,EAAP,IAA6C;AAC5D,QAAI;AACA,YAAME,IAAW,GAAG,MAAMpB,WAAW,CAAC0B,UAAZ,CAAuBR,EAAvB,CAA1B;AACA,YAAMS,WAAW,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,IAAI,IAAI;AACrC,eAAOA,IAAI,CAACP,GAAL,KAAaF,IAAI,CAACE,GAAzB;AACH,OAFmB,CAApB;AAGAnB,MAAAA,QAAQ,CAACwB,WAAD,CAAR;AACH,KAND,CAME,OAAOd,CAAP,EAAU;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CC,CAA5C;AACH;AACJ,GAVD;;AAYA,sBACI;AAAA,2BACI,QAAC,cAAD;AAAgB,MAAA,UAAU,EAAEL;AAA5B;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CApDM;;GAAMP,a;;KAAAA,a","sourcesContent":["import {useEffect, useState} from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport {ITask} from \"../../models/interface/interface\";\nimport TodoService from \"../../service/todoService/TodoService\";\n\nexport const MainContainer = (): JSX.Element => {\n\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo typisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos)\n            setTodos(getTodos)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const changeTodoHandler = (changeTodo: ITask, id: string) => {\n        todos.map((todo, index) => {\n            if(id === todo._id) {\n                const prevArr = todos.splice(index, 1, changeTodo)\n                const arr = [...todos]\n                setTodos(arr)\n            } else {\n                console.log('не сработало')\n            }\n        })\n    }\n\n    const deleteTodo = async (id: string): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    return (\n        <>\n            <TodosContainer fetchTodos={fetchTodos}/>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}