{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\";\nimport React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodosContainer = _ref => {\n  let {\n    todos,\n    setTodos\n  } = _ref;\n\n  const EditTodo = (title, id) => {};\n\n  const toggleIsCheck = async body => {\n    try {\n      console.log('I AM START');\n      const updatedTodo = await TodoService.updateTodo(body);\n      console.log('I AM updatedTodo', updatedTodo);\n      changeTodoHandler(updatedTodo);\n      console.log(updatedTodo, body);\n      console.log(todos);\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const todoIsCheck = async todo => {\n    const {\n      _id,\n      title,\n      isCheck\n    } = todo;\n    const body = {\n      _id,\n      title,\n      isCheck: !isCheck\n    };\n    console.log('I AM BODY', body);\n    console.log(body, todos);\n\n    try {\n      const response = await toggleIsCheck(todo);\n      return response;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const changeTodoHandler = changeTodo => {\n    const {\n      _id\n    } = changeTodo;\n    todos.map((todo, index) => {\n      if (_id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...prevArr]; //arr\n\n        setTodos(arr);\n      } else {\n        console.log('Problem in function changeTodoHandler');\n      }\n    });\n  };\n\n  const changeCheck = body => {\n    console.log(body);\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const TodoRemove = async id => {\n    try {\n      await deleteTodo(id);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      TodoRemove: TodoRemove,\n      EditTodo: EditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodoService","PopupContainer","TodosComponent","TodosContainer","todos","setTodos","EditTodo","title","id","toggleIsCheck","body","console","log","updatedTodo","updateTodo","changeTodoHandler","e","todoIsCheck","todo","_id","isCheck","response","changeTodo","map","index","prevArr","splice","arr","changeCheck","deleteTodo","newArrTodos","filter","task","TodoRemove"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITask[]\n    setTodos: (body: ITask[]) => void\n}\n\nexport const TodosContainer = ({todos, setTodos}: TodosContainerProp): JSX.Element => {\n\n\n    const EditTodo = (title: ITask[\"title\"], id: ITask[\"_id\"]) => {\n\n    }\n\n    const toggleIsCheck = async (body: ITask): Promise<void> => {\n        try {\n            console.log('I AM START')\n            const updatedTodo = await TodoService.updateTodo(body)\n            console.log('I AM updatedTodo', updatedTodo)\n            changeTodoHandler(updatedTodo)\n            console.log(updatedTodo, body)\n            console.log(todos)\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const todoIsCheck = async (todo: ITask) => {\n        const {_id, title, isCheck} = todo\n        const body: ITask = {\n            _id,\n            title,\n            isCheck: !isCheck\n        }\n        console.log('I AM BODY', body)\n        console.log(body, todos)\n\n        try {\n             const response = await toggleIsCheck(todo)\n            return response\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const changeTodoHandler = (changeTodo: ITask) => {\n        const {_id} = changeTodo\n        todos.map((todo, index) => {\n            if(_id === todo._id) {\n                const prevArr = todos.splice(index, 1, changeTodo)\n                const arr = [...prevArr] //arr\n                setTodos(arr)\n            } else {\n                console.log('Problem in function changeTodoHandler')\n            }\n        })\n    }\n\n    const changeCheck = (body: ITask) => {\n        console.log(body)\n    }\n\n    const deleteTodo = async (id: ITask[\"_id\"]): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n    const TodoRemove = async (id: ITask[\"_id\"]) => {\n        try {\n            await deleteTodo(id)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    return (\n        <>\n            <TodosComponent todos={todos} TodoRemove={TodoRemove} EditTodo={EditTodo} todoIsCheck={todoIsCheck} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} />\n        </>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}