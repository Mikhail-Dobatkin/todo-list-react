{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport httpQuery from '../httpQuery/httpQuery';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [task, setTask] = useState([]);\n  useEffect(() => {\n    const getAllTasks = async () => {\n      try {\n        const response = await httpQuery.get('/allTasks');\n        const result = response.data;\n        return setTask(result);\n      } catch (e) {\n        console.log('I`M Error on GET query!', e);\n      }\n    };\n\n    getAllTasks().then(res => console.log(res));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Task, \"I3GSAy+XdcJionI8zCBmPBZszgQ=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/components/task/task.tsx"],"names":["React","useEffect","useState","httpQuery","Task","task","setTask","getAllTasks","response","get","result","data","e","console","log","then","res"],"mappings":";;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AAEA,OAAOC,SAAP,MAAuB,wBAAvB;;;;AAEA,MAAMC,IAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAU,EAAV,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,WAAW,GAAG,YAAqC;AACrD,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAV,CAAuB,WAAvB,CAAvB;AACA,cAAMC,MAAM,GAAGF,QAAQ,CAACG,IAAxB;AACA,eAAOL,OAAO,CAACI,MAAD,CAAd;AACH,OAJD,CAIE,OAAOE,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,CAAvC;AACH;AACJ,KARD;;AASAL,IAAAA,WAAW,GAAGQ,IAAd,CAAmBC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAA1B;AACC,GAXI,EAWF,EAXE,CAAT;AAcA,sBACI,qCADJ;AAKH,CAvBD;;GAAMZ,I;;KAAAA,I;AAwBN,eAAeA,IAAf","sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\nimport { ITask } from \"../interface/interface\";\nimport httpQuery  from '../httpQuery/httpQuery'\n\nconst Task: FC = () => {\n\n    const [task, setTask] = useState<ITask[]>([])\n\n    useEffect(() => {\n        const getAllTasks = async (): Promise<ITask[] | void> => {\n            try {\n                const response = await httpQuery.get<ITask[]>('/allTasks')\n                const result = response.data\n                return setTask(result)\n            } catch (e) {\n                console.log('I`M Error on GET query!', e)\n            }\n        }\n        getAllTasks().then(res => console.log(res))\n        }, [])\n\n\n    return(\n        <>\n            {}\n        </>\n    )\n}\nexport default Task"]},"metadata":{},"sourceType":"module"}