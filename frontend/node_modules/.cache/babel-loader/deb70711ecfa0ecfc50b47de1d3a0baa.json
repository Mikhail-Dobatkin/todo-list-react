{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = _ref => {\n  _s();\n\n  let {\n    fetchTodos,\n    newTaskHandler,\n    todos,\n    btnTodoRemove,\n    changeTodoHandler,\n    prevTodoValue\n  } = _ref;\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState('');\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const btnEditTodo = id => {\n    console.log(id); // todos.forEach(todo => {\n    //     if (todo._id === ) {\n    //         const value = todo.title\n    //         prevTodoValue(, value)\n    //         setTodoTitlePrev(value)\n    //         setTodoId()\n    //     }\n    // })\n  };\n\n  const toggleIsCheck = async (body, id) => {\n    try {\n      const updatedTodo = await TodoService.updateTodo(body, id);\n      changeTodoHandler(body, id);\n      console.log(updatedTodo, 'I`M FUNCTION UPDATE');\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const todoIsCheck = async id => {\n    todos.map(todo => {\n      if (todo._id === id) {}\n    });\n\n    try {} catch (e) {\n      console.log('Error on todoIsCheck function', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      indexTodoChanged: indexTodoChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"/5H482R1UD8kwforEMR+RcifBcs=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","fetchTodos","newTaskHandler","todos","btnTodoRemove","changeTodoHandler","prevTodoValue","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","btnEditTodo","id","console","log","toggleIsCheck","body","updatedTodo","updateTodo","e","todoIsCheck","map","todo","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,aAAP;;;;AAWA,MAAMC,cAAc,GAAG,QAOwB;AAAA;;AAAA,MAPvB;AAChBC,IAAAA,UADgB;AAEhBC,IAAAA,cAFgB;AAGhBC,IAAAA,KAHgB;AAIhBC,IAAAA,aAJgB;AAKhBC,IAAAA,iBALgB;AAMhBC,IAAAA;AANgB,GAOuB;AAE3C,QAAM,CAACC,cAAD,EAAiBC,gBAAjB,IAAqCb,QAAQ,CAAS,EAAT,CAAnD;AACA,QAAM,CAACc,gBAAD,EAAmBC,SAAnB,IAAgCf,QAAQ,CAAS,EAAT,CAA9C;AAEAD,EAAAA,SAAS,CAAE,MAAM;AACbO,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMU,WAAW,GAAIC,EAAD,IAA4B;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ,EAD4C,CAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP,GAXD;;AAaA,QAAMG,aAAa,GAAG,OAAOC,IAAP,EAAoBJ,EAApB,KAAkD;AACpE,QAAI;AACA,YAAMK,WAAkB,GAAG,MAAMrB,WAAW,CAACsB,UAAZ,CAAuBF,IAAvB,EAA6BJ,EAA7B,CAAjC;AACAP,MAAAA,iBAAiB,CAACW,IAAD,EAAOJ,EAAP,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYG,WAAZ,EAAyB,qBAAzB;AACH,KAJD,CAIE,OAAOE,CAAP,EAAU;AACRN,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CK,CAA/C;AACH;AACJ,GARD;;AAUA,QAAMC,WAAW,GAAG,MAAOR,EAAP,IAAkC;AAClDT,IAAAA,KAAK,CAACkB,GAAN,CAAUC,IAAI,IAAI;AACd,UAAGA,IAAI,CAACC,GAAL,KAAaX,EAAhB,EAAoB,CAEnB;AACJ,KAJD;;AAKI,QAAI,CAEH,CAFD,CAEE,OAAOO,CAAP,EAAU;AACRN,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CK,CAA7C;AACH;AAER,GAZD;;AAcA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEjB;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAEC,KAAvB;AAA8B,MAAA,aAAa,EAAEC,aAA7C;AAA4D,MAAA,WAAW,EAAEO,WAAzE;AAAsF,MAAA,WAAW,EAAES;AAAnG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,cAAD;AAAgB,MAAA,iBAAiB,EAAEf,iBAAnC;AAAsD,MAAA,aAAa,EAAEC,aAArE;AAAoF,MAAA,gBAAgB,EAAEG;AAAtG;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CA5DD;;GAAMT,c;;KAAAA,c;AA8DN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    newTaskHandler: (body: ITask) => void\n    todos: ITask[]\n    btnTodoRemove: (e: React.MouseEvent<HTMLButtonElement>) => Promise<void>\n    changeTodoHandler: (body: ITask, id: string) => void\n    prevTodoValue: (id: string, value: string) => void\n}\n\nconst TodosContainer = ({\n        fetchTodos,\n        newTaskHandler,\n        todos,\n        btnTodoRemove,\n        changeTodoHandler,\n        prevTodoValue\n        }: TodosContainerProp): JSX.Element => {\n\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n    const btnEditTodo = (id: string | undefined) => {\n        console.log(id)\n\n            // todos.forEach(todo => {\n            //     if (todo._id === ) {\n            //         const value = todo.title\n            //         prevTodoValue(, value)\n            //         setTodoTitlePrev(value)\n            //         setTodoId()\n            //     }\n            // })\n    }\n\n    const toggleIsCheck = async (body: ITask, id: string): Promise<void> => {\n        try {\n            const updatedTodo: ITask = await TodoService.updateTodo(body, id)\n            changeTodoHandler(body, id)\n            console.log(updatedTodo, 'I`M FUNCTION UPDATE')\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const todoIsCheck = async (id: string | undefined) => {\n        todos.map(todo => {\n            if(todo._id === id) {\n                \n            }\n        })\n            try {\n\n            } catch (e) {\n                console.log('Error on todoIsCheck function', e)\n            }\n\n    }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} todoIsCheck={todoIsCheck} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} indexTodoChanged={indexTodoChanged} />\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}