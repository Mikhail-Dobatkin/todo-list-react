{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TodoService from '../../service/todoService/TodoService';\nimport { TodosContainer } from '../todos-container/todos-container';\nimport { TodoFormContainer } from '../todo-form/todo-form-container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const state = useSelector(state => state);\n  console.log(state);\n\n  const fetchTodos = async () => {\n    try {\n      const getTodos = await TodoService.getAllTodos();\n      return setTodos(getTodos.reverse());\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoFormContainer, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos,\n      todos: todos,\n      setTodos: setTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"oUC06stqCXmEUGlKNEyvWSH7sFs=\", false, function () {\n  return [useSelector];\n});\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useEffect","useState","useSelector","TodoService","TodosContainer","TodoFormContainer","MainContainer","todos","setTodos","state","console","log","fetchTodos","getTodos","getAllTodos","reverse","e","newTaskHandler","newTask"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAmB;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAU,EAAV,CAAlC;AAEA,QAAMQ,KAAK,GAAGP,WAAW,CAACO,KAAK,IAAIA,KAAV,CAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,QAAMG,UAAU,GAAG,YAA2B;AAC5C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMV,WAAW,CAACW,WAAZ,EAAvB;AACA,aAAON,QAAQ,CAACK,QAAQ,CAACE,OAAT,EAAD,CAAf;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCK,CAAnC;AACD;AACF,GAPD;;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,cAAc,GAAIC,OAAD,IAAoB;AACzCV,IAAAA,QAAQ,CAAC,CAACU,OAAD,EAAU,GAAGX,KAAb,CAAD,CAAR;AACD,GAFD;;AAIA,sBACU;AAAA,4BACI,QAAC,iBAAD;AAAmB,MAAA,cAAc,EAAEU;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AACI,MAAA,UAAU,EAAEL,UADhB;AAEI,MAAA,KAAK,EAAEL,KAFX;AAGI,MAAA,QAAQ,EAAEC;AAHd;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADV;AAUD,CAhCM;;GAAMF,a;UAGGJ,W;;;KAHHI,a","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosContainer } from '../todos-container/todos-container'\nimport { ITodo } from '../../models/interface/interface'\nimport { TodoFormContainer } from '../todo-form/todo-form-container'\n\nexport const MainContainer = (): JSX.Element => {\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  const state = useSelector(state => state)\n  console.log(state)\n  const fetchTodos = async (): Promise<void> => {\n    try {\n      const getTodos = await TodoService.getAllTodos()\n      return setTodos(getTodos.reverse())\n    } catch (e) {\n      console.log('Error in fetchTodos', e)\n    }\n  }\n\n  useEffect(() => {\n    fetchTodos()\n  }, [])\n\n  const newTaskHandler = (newTask: ITodo) => {\n    setTodos([newTask, ...todos])\n  }\n\n  return (\n            <>\n                <TodoFormContainer newTaskHandler={newTaskHandler} />\n                <TodosContainer\n                    fetchTodos={fetchTodos}\n                    todos={todos}\n                    setTodos={setTodos}\n                />\n            </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}