{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = _ref => {\n  _s();\n\n  let {\n    fetchTodos,\n    newTaskHandler,\n    todos,\n    btnTodoRemove,\n    changeTodoHandler,\n    prevTodoValue,\n    changeCheck\n  } = _ref;\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState('');\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const btnEditTodo = e => {\n    e.preventDefault();\n\n    if ('id' in e.target) {\n      const id = e.target.id;\n      todos.forEach(todo => {\n        if (todo._id === id) {\n          const value = todo.title;\n          setTodoTitlePrev(value);\n          setTodoIsadasdd(id);\n        }\n      });\n    }\n  };\n\n  const toggleIsCheck = async (body, id) => {\n    try {\n      const updatedTodo = await TodoService.updateTodo(body, id);\n      changeTodoHandler(body, id);\n      console.log(updatedTodo, 'I`M FUNCTION UPDATE');\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const todoIsCheck = e => {\n    const body = {\n      title: e.target.title,\n      isCheck: !e.target.checked\n    };\n    changeCheck(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      indexTodoChanged: indexTodoChanged,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"/5H482R1UD8kwforEMR+RcifBcs=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","fetchTodos","newTaskHandler","todos","btnTodoRemove","changeTodoHandler","prevTodoValue","changeCheck","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","btnEditTodo","e","preventDefault","target","id","forEach","todo","_id","value","title","setTodoIsadasdd","toggleIsCheck","body","updatedTodo","updateTodo","console","log","todoIsCheck","isCheck","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,aAAP;;;;AAgBA,MAAMC,cAAc,GAAG,QAQwB;AAAA;;AAAA,MARvB;AAChBC,IAAAA,UADgB;AAEhBC,IAAAA,cAFgB;AAGhBC,IAAAA,KAHgB;AAIhBC,IAAAA,aAJgB;AAKhBC,IAAAA,iBALgB;AAMhBC,IAAAA,aANgB;AAOhBC,IAAAA;AAPgB,GAQuB;AAE3C,QAAM,CAACC,cAAD,EAAiBC,gBAAjB,IAAqCd,QAAQ,CAAS,EAAT,CAAnD;AACA,QAAM,CAACe,gBAAD,EAAmBC,SAAnB,IAAgChB,QAAQ,CAAS,EAAT,CAA9C;AAEAD,EAAAA,SAAS,CAAE,MAAM;AACbO,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMW,WAAW,GAAIC,CAAD,IAAc;AAC9BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,QAAQD,CAAC,CAACE,MAAb,EAAqB;AACjB,YAAMC,EAAE,GAAGH,CAAC,CAACE,MAAF,CAASC,EAApB;AACAb,MAAAA,KAAK,CAACc,OAAN,CAAcC,IAAI,IAAI;AAClB,YAAIA,IAAI,CAACC,GAAL,KAAaH,EAAjB,EAAqB;AACjB,gBAAMI,KAAK,GAAGF,IAAI,CAACG,KAAnB;AACAZ,UAAAA,gBAAgB,CAACW,KAAD,CAAhB;AACAE,UAAAA,eAAe,CAACN,EAAD,CAAf;AACH;AACJ,OAND;AAOH;AACJ,GAZD;;AAcA,QAAMO,aAAa,GAAG,OAAOC,IAAP,EAAoBR,EAApB,KAAkD;AACpE,QAAI;AACA,YAAMS,WAAkB,GAAG,MAAM7B,WAAW,CAAC8B,UAAZ,CAAuBF,IAAvB,EAA6BR,EAA7B,CAAjC;AACAX,MAAAA,iBAAiB,CAACmB,IAAD,EAAOR,EAAP,CAAjB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAyB,qBAAzB;AACH,KAJD,CAIE,OAAOZ,CAAP,EAAU;AACRc,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+Cf,CAA/C;AACH;AACJ,GARD;;AAUA,QAAMgB,WAAW,GAAIhB,CAAD,IAA4C;AAC5D,UAAMW,IAAI,GAAG;AACTH,MAAAA,KAAK,EAAER,CAAC,CAACE,MAAF,CAASM,KADP;AAETS,MAAAA,OAAO,EAAE,CAACjB,CAAC,CAACE,MAAF,CAASgB;AAFV,KAAb;AAIAxB,IAAAA,WAAW,CAACiB,IAAD,CAAX;AACH,GAND;;AAQA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEtB;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAEC,KAAvB;AAA8B,MAAA,aAAa,EAAEC,aAA7C;AAA4D,MAAA,WAAW,EAAEQ,WAAzE;AAAsF,MAAA,WAAW,EAAEiB;AAAnG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,cAAD;AAAgB,MAAA,iBAAiB,EAAExB,iBAAnC;AAAsD,MAAA,aAAa,EAAEC,aAArE;AAAoF,MAAA,gBAAgB,EAAEI,gBAAtG;AAAwH,MAAA,WAAW,EAAEmB;AAArI;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CAxDD;;GAAM7B,c;;KAAAA,c;AA0DN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    newTaskHandler: (body: ITask) => void\n    todos: ITask[]\n    btnTodoRemove: (e: React.MouseEvent<HTMLButtonElement>) => Promise<void>\n    changeTodoHandler: (body: ITask, id: string) => void\n    changeCheck: (body: ITask) => void\n    prevTodoValue: (id: string, value: string) => void\n}\n\nconst TodosContainer = ({\n        fetchTodos,\n        newTaskHandler,\n        todos,\n        btnTodoRemove,\n        changeTodoHandler,\n        prevTodoValue,\n        changeCheck\n        }: TodosContainerProp): JSX.Element => {\n\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n    const btnEditTodo = (e: Event) => {\n        e.preventDefault()\n        if('id' in e.target) {\n            const id = e.target.id\n            todos.forEach(todo => {\n                if (todo._id === id) {\n                    const value = todo.title\n                    setTodoTitlePrev(value)\n                    setTodoIsadasdd(id)\n                }\n            })\n        }\n    }\n\n    const toggleIsCheck = async (body: ITask, id: string): Promise<void> => {\n        try {\n            const updatedTodo: ITask = await TodoService.updateTodo(body, id)\n            changeTodoHandler(body, id)\n            console.log(updatedTodo, 'I`M FUNCTION UPDATE')\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const todoIsCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const body = {\n            title: e.target.title,\n            isCheck: !e.target.checked\n        }\n        changeCheck(body)\n    }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} todoIsCheck={todoIsCheck} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} indexTodoChanged={indexTodoChanged} todoIsCheck={todoIsCheck} />\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}