{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TodosComponent } from './todos-component';\nimport './style.css';\nimport { useDispatch } from 'react-redux'; // import { changeTodo, deleteBook } from '../../store/action-creators/action-creator'\n\nimport { changeTodo } from '../../store/action-creators/action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodosContainer = _ref => {\n  _s();\n\n  let {\n    todos,\n    setTodos\n  } = _ref;\n  const dispatch = useDispatch(); // const changeTodoState = (changedTodo: any) => {\n  //   todos.map((todo: ITodo) => {\n  //     if (changedTodo.id === todo._id) {\n  //       todo.isCheck = !todo.isCheck\n  //     }\n  //     return todo\n  //   })\n  //   setTodos([...todos])\n  // }\n\n  const toggleIsCheck = todo => {\n    //   try {\n    const {\n      _id,\n      title,\n      isCheck\n    } = todo;\n    const body = {\n      id: _id,\n      title,\n      isCheck: !isCheck\n    };\n    dispatch(changeTodo(body)); //     await TodoService.updateTodo(body)\n    //\n    //     changeTodoState(body)\n    //   } catch (e) {\n    //     console.log('Error in toggleIsCheck function', e)\n    //   }\n  };\n\n  const deleteTodo = async id => {\n    //   try {\n    //     const todo: ITodo = await TodoService.deleteTodo(id)\n    //   dispatch(deleteBook(id))\n    dispatch(deleteTodo(id)); //   const newArrTodos = todos.filter(task => {\n    //     return task._id !== todo._id\n    //   })\n    //   setTodos(newArrTodos)\n    // } catch (e) {\n    //   console.log('Error in function deleteTodo', e)\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosComponent, {\n    todos: todos,\n    deleteTodo: deleteTodo,\n    toggleIsCheck: toggleIsCheck\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodosContainer, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodosComponent","useDispatch","changeTodo","TodosContainer","todos","setTodos","dispatch","toggleIsCheck","todo","_id","title","isCheck","body","id","deleteTodo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AACA,SAAqBC,UAArB,QAAuC,oCAAvC;;AAQA,OAAO,MAAMC,cAAc,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAyD;AACtF,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADsF,CAGtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMM,aAAa,GAAIC,IAAD,IAAiB;AACvC;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,QAA0BH,IAAhC;AACA,UAAMI,IAAI,GAAG;AACXC,MAAAA,EAAE,EAAEJ,GADO;AAEXC,MAAAA,KAFW;AAGXC,MAAAA,OAAO,EAAE,CAACA;AAHC,KAAb;AAKAL,IAAAA,QAAQ,CAACJ,UAAU,CAACU,IAAD,CAAX,CAAR,CARqC,CASvC;AACA;AACA;AACA;AACA;AACA;AACC,GAfD;;AAiBA,QAAME,UAAU,GAAG,MAAOD,EAAP,IAAmD;AACtE;AACA;AACA;AACEP,IAAAA,QAAQ,CAACQ,UAAU,CAACD,EAAD,CAAX,CAAR,CAJoE,CAKpE;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAZD;;AAcA,sBACM,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAET,KAAvB;AAA8B,IAAA,UAAU,EAAEU,UAA1C;AAAsD,IAAA,aAAa,EAAEP;AAArE;AAAA;AAAA;AAAA;AAAA,UADN;AAGD,CA/CM;;GAAMJ,c;UACMF,W;;;KADNE,c","sourcesContent":["import React from 'react'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosComponent } from './todos-component'\nimport { ITodo } from '../../models/interface/interface'\nimport './style.css'\nimport { useDispatch } from 'react-redux'\n// import { changeTodo, deleteBook } from '../../store/action-creators/action-creator'\nimport { deleteTodo, changeTodo } from '../../store/action-creators/action'\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITodo[]\n    setTodos: (body: ITodo[]) => void\n}\n\nexport const TodosContainer = ({ todos, setTodos }: TodosContainerProp): JSX.Element => {\n  const dispatch = useDispatch()\n\n  // const changeTodoState = (changedTodo: any) => {\n  //   todos.map((todo: ITodo) => {\n  //     if (changedTodo.id === todo._id) {\n  //       todo.isCheck = !todo.isCheck\n  //     }\n  //     return todo\n  //   })\n  //   setTodos([...todos])\n  // }\n\n  const toggleIsCheck = (todo: ITodo) => {\n  //   try {\n    const { _id, title, isCheck } = todo\n    const body = {\n      id: _id,\n      title,\n      isCheck: !isCheck\n    }\n    dispatch(changeTodo(body))\n  //     await TodoService.updateTodo(body)\n  //\n  //     changeTodoState(body)\n  //   } catch (e) {\n  //     console.log('Error in toggleIsCheck function', e)\n  //   }\n  }\n\n  const deleteTodo = async (id: ITodo['_id']): Promise<ITodo | void> => {\n  //   try {\n  //     const todo: ITodo = await TodoService.deleteTodo(id)\n  //   dispatch(deleteBook(id))\n    dispatch(deleteTodo(id))\n    //   const newArrTodos = todos.filter(task => {\n    //     return task._id !== todo._id\n    //   })\n    //   setTodos(newArrTodos)\n    // } catch (e) {\n    //   console.log('Error in function deleteTodo', e)\n    // }\n  }\n\n  return (\n        <TodosComponent todos={todos} deleteTodo={deleteTodo} toggleIsCheck={toggleIsCheck} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}