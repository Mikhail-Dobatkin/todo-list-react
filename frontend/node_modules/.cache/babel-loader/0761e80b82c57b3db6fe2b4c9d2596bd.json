{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport httpQuery from '../httpQuery/httpQuery';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Task = () => {\n  _s();\n\n  const [tasks, setTask] = useState([]);\n  useEffect(() => {\n    getAllTasks().then(res => console.log(res));\n  }, []);\n\n  async function getAllTasks() {\n    try {\n      const response = await httpQuery.get('/allTasks');\n      const result = await response.data;\n      return setTask(result);\n    } catch (e) {\n      console.log('I`M Error on GET query!', e);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Task, \"Oalh7gGRly8nmy9ApEFAxF9qmMk=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/components/task/task.tsx"],"names":["React","useEffect","useState","httpQuery","Task","tasks","setTask","getAllTasks","then","res","console","log","response","get","result","data","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AAEA,OAAOC,SAAP,MAAuB,wBAAvB;;;;AAEA,MAAMC,IAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBJ,QAAQ,CAAU,EAAV,CAAjC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZM,IAAAA,WAAW,GAAGC,IAAd,CAAmBC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAA1B;AACC,GAHI,EAGF,EAHE,CAAT;;AAKA,iBAAeF,WAAf,GAAuD;AACnD,QAAI;AACA,YAAMK,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAV,CAAuB,WAAvB,CAAvB;AACA,YAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAA9B;AACA,aAAOT,OAAO,CAACQ,MAAD,CAAd;AACH,KAJD,CAIE,OAAOE,CAAP,EAAU;AACRN,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCK,CAAvC;AACH;AACJ;;AACD,sBACI,qCADJ;AAOH,CAzBD;;GAAMZ,I;;KAAAA,I;AA0BN,eAAeA,IAAf","sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\nimport { ITask } from \"../interface/interface\";\nimport httpQuery  from '../httpQuery/httpQuery'\n\nconst Task: FC = () => {\n\n    const [tasks, setTask] = useState<ITask[]>([])\n\n    useEffect(() => {\n\n        getAllTasks().then(res => console.log(res))\n        }, [])\n\n    async function getAllTasks(): Promise<ITask[] | void>  {\n        try {\n            const response = await httpQuery.get<ITask[]>('/allTasks')\n            const result = await response.data\n            return setTask(result)\n        } catch (e) {\n            console.log('I`M Error on GET query!', e)\n        }\n    }\n    return(\n        <>\n            {/*<div>{tasks.map(task => {*/}\n            {/*    return <li key={task.id}>{task.title}</li>*/}\n            {/*})}</div>*/}\n        </>\n    )\n}\nexport default Task"]},"metadata":{},"sourceType":"module"}