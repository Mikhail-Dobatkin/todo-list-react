{"ast":null,"code":"import React from \"react\";\nimport './style.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = () => {\n  // const [todos, setTodos] = useState<ITask[]>([])\n  //\n  // const fetchTodos = async (): Promise<void> => {\n  //     try {\n  //         //todo typisation utility types\n  //         const getTodos: any = await TodoService.getAllTodos()\n  //         console.log(getTodos)\n  //         setTodos(getTodos)\n  //     } catch (e) {\n  //         console.log('Error in fetchTodos', e)\n  //     }\n  // }\n  // useEffect(() => {\n  //     fetchTodos()\n  // }, [])\n  // const newTaskHandler = (newTask: ITask) => {\n  //     setTodos([newTask, ...todos])\n  // }\n  // const changeTodoHandler = (changeTodo: ITask, id: string) => {\n  //     setTodos([...todos, changeTodo])\n  // }\n  // const deleteTodo = async (id: string): Promise<ITask | void> => {\n  //     try {\n  //         const todo: ITask = await TodoService.deleteTodo(id)\n  //         const newArrTodos = todos.filter(task => {\n  //            return task._id !== todo._id\n  //         })\n  //         setTodos(newArrTodos)\n  //     } catch (e) {\n  //         console.log('Error in function deleteTodo', e)\n  //     }\n  // }\n  // //todo type\n  // const btnTodoRemove = async (event: Event) => {\n  //     event.preventDefault()\n  //     if (\"id\" in event.target) {\n  //         const id = event.target.id\n  //         try {\n  //             await deleteTodo(id)\n  //         } catch (e) {\n  //             console.log('Error in function deleteTodo', e)\n  //         }\n  //         console.log(id)\n  //     }\n  // }\n  //\n  // //todo get todo id instead of event\n  // const btnEditTodo = (e: Event) => {\n  //     e.preventDefault()\n  //     if('id' in e.target) {\n  //         const id = e.target.id\n  //         todos.forEach(todo => {\n  //             if (todo._id === id) {\n  //                 const value = todo.title\n  //                 console.log(id, value)\n  //                 prevTodoValue(id, value)\n  //             }\n  //         })\n  //     }\n  // }\n  //\n  // const prevTodoValue = (id: string, value: string) => {\n  //     const body = {\n  //         _id: id,\n  //         title: value\n  //     }\n  //     console.log(body)\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodosContainer"],"mappings":"AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAMA,OAAO,aAAP;;;;AAOA,MAAMC,cAAc,GAAG,MAAmB;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACI,qCADJ;AAOH,CAlFD;;KAAMA,c;AAoFN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\n\nconst TodosContainer = (): JSX.Element => {\n\n    // const [todos, setTodos] = useState<ITask[]>([])\n    //\n    // const fetchTodos = async (): Promise<void> => {\n    //     try {\n    //         //todo typisation utility types\n    //         const getTodos: any = await TodoService.getAllTodos()\n    //         console.log(getTodos)\n    //         setTodos(getTodos)\n    //     } catch (e) {\n    //         console.log('Error in fetchTodos', e)\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     fetchTodos()\n    // }, [])\n\n    // const newTaskHandler = (newTask: ITask) => {\n    //     setTodos([newTask, ...todos])\n    // }\n    // const changeTodoHandler = (changeTodo: ITask, id: string) => {\n    //     setTodos([...todos, changeTodo])\n    // }\n\n    // const deleteTodo = async (id: string): Promise<ITask | void> => {\n    //     try {\n    //         const todo: ITask = await TodoService.deleteTodo(id)\n    //         const newArrTodos = todos.filter(task => {\n    //            return task._id !== todo._id\n    //         })\n    //         setTodos(newArrTodos)\n    //     } catch (e) {\n    //         console.log('Error in function deleteTodo', e)\n    //     }\n    // }\n\n    // //todo type\n    // const btnTodoRemove = async (event: Event) => {\n    //     event.preventDefault()\n    //     if (\"id\" in event.target) {\n    //         const id = event.target.id\n    //         try {\n    //             await deleteTodo(id)\n    //         } catch (e) {\n    //             console.log('Error in function deleteTodo', e)\n    //         }\n    //         console.log(id)\n    //     }\n    // }\n    //\n    // //todo get todo id instead of event\n    // const btnEditTodo = (e: Event) => {\n    //     e.preventDefault()\n    //     if('id' in e.target) {\n    //         const id = e.target.id\n    //         todos.forEach(todo => {\n    //             if (todo._id === id) {\n    //                 const value = todo.title\n    //                 console.log(id, value)\n    //                 prevTodoValue(id, value)\n    //             }\n    //         })\n    //     }\n    // }\n    //\n    // const prevTodoValue = (id: string, value: string) => {\n    //     const body = {\n    //         _id: id,\n    //         title: value\n    //     }\n    //     console.log(body)\n    // }\n\n    return (\n        <>\n            {/*<TodoForm newTaskHandler={newTaskHandler} />*/}\n            {/*<TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} />*/}\n            {/*<PopupContainer prevTodoValue={prevTodoValue} changeTodoHandler={changeTodoHandler}/>*/}\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}