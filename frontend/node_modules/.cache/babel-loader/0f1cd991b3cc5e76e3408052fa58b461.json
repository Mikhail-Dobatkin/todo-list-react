{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\";\nimport React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar It = jest.It;\n\nconst TodosContainer = _ref => {\n  let {\n    todos,\n    setTodos\n  } = _ref;\n\n  const btnEditTodo = id => {\n    console.log(id); // todos.forEach(todo => {\n    //     if (todo._id === ) {\n    //         const value = todo.title\n    //         prevTodoValue(, value)\n    //         setTodoTitlePrev(value)\n    //         setTodoId()\n    //     }\n    // })\n  };\n\n  const toggleIsCheck = async (body, id) => {\n    try {\n      const updatedTodo = await TodoService.updateTodo(body, id); // changeTodoHandler(check, id)\n\n      console.log(updatedTodo, 'I`M FUNCTION UPDATE');\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const todoIsCheck = async (title, isCheck, id) => {\n    const body = {\n      id,\n      title,\n      isCheck: !isCheck\n    };\n    changeTodoHandler(body, id);\n    console.log(body);\n\n    try {\n      await toggleIsCheck(body, id);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const changeTodoHandler = (changeTodo, id) => {\n    todos.map((todo, index) => {\n      if (id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...todos];\n        setTodos(arr);\n      } else {\n        console.log('Problem in function changeTodoHandler');\n      }\n    });\n  };\n\n  const changeCheck = body => {\n    console.log(body);\n  }; //todo move to todo container\n\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const btnTodoRemove = async id => {\n    try {\n      await deleteTodo(id);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodoService","PopupContainer","TodosComponent","It","jest","TodosContainer","todos","setTodos","btnEditTodo","id","console","log","toggleIsCheck","body","updatedTodo","updateTodo","e","todoIsCheck","title","isCheck","changeTodoHandler","changeTodo","map","todo","index","_id","prevArr","splice","arr","changeCheck","deleteTodo","newArrTodos","filter","task","btnTodoRemove"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\nimport It = jest.It;\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITask[]\n    // btnTodoRemove: (id: ITask[\"_id\"]) => void\n    // changeTodoHandler: (body: ITask, id: ITask[\"_id\"]) => void\n    // btnEditTodo: (id: ITask[\"_id\"]) => void\n    setTodos: (body: ITask[]) => void\n}\n\nconst TodosContainer = ({todos, setTodos}: TodosContainerProp): JSX.Element => {\n\n    const btnEditTodo = (id: ITask[\"_id\"]) => {\n        console.log(id)\n\n            // todos.forEach(todo => {\n            //     if (todo._id === ) {\n            //         const value = todo.title\n            //         prevTodoValue(, value)\n            //         setTodoTitlePrev(value)\n            //         setTodoId()\n            //     }\n            // })\n    }\n\n    const toggleIsCheck = async (body: ITask, id: ITask[\"_id\"]): Promise<void> => {\n        try {\n            const updatedTodo = await TodoService.updateTodo(body, id)\n            // changeTodoHandler(check, id)\n            console.log(updatedTodo, 'I`M FUNCTION UPDATE')\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const todoIsCheck = async (title: ITask[\"title\"] ,isCheck: ITask[\"isCheck\"], id: ITask[\"_id\"]) => {\n        const body = {\n            id,\n            title,\n            isCheck: !isCheck\n        }\n        changeTodoHandler(body, id)\n        console.log(body)\n        try {\n             await toggleIsCheck(body, id)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const changeTodoHandler = (changeTodo: ITask, id: ITask[\"_id\"]) => {\n        todos.map((todo, index) => {\n            if(id === todo._id) {\n                const prevArr = todos.splice(index, 1, changeTodo)\n                const arr = [...todos]\n                setTodos(arr)\n            } else {\n                console.log('Problem in function changeTodoHandler')\n            }\n        })\n    }\n\n    const changeCheck = (body: ITask) => {\n        console.log(body)\n    }\n\n    //todo move to todo container\n    const deleteTodo = async (id: ITask[\"_id\"]): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n    const btnTodoRemove = async (id: ITask[\"_id\"]) => {\n\n        try {\n            await deleteTodo(id)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    return (\n        <>\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} todoIsCheck={todoIsCheck} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} />\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}