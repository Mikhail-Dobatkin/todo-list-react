{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n\n  const fetchTodos = async () => {\n    try {\n      //todo tipisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos);\n      setTodos(getTodos);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await new TodoService().deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  }; //todo type\n\n\n  const btnTodoRemove = async event => {\n    event.preventDefault();\n    const id = event.target.id;\n\n    try {\n      await deleteTodo(id);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n\n    console.log(id);\n  }; //todo get todo id instead of event\n\n\n  const btnEditTodo = e => {\n    e.preventDefault();\n    const id = e.target.id;\n    todos.forEach(todo => {\n      if (todo._id === id) {\n        const value = todo.title;\n        console.log(id, value);\n        prevTodoValue(id, value);\n      }\n    });\n  };\n\n  const prevTodoValue = (id, value) => {\n    const body = {\n      _id: id,\n      title: value\n    };\n    console.log(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      prevTodoValue: prevTodoValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","todos","setTodos","fetchTodos","getTodos","getAllTodos","console","log","e","newTaskHandler","newTask","deleteTodo","id","todo","newArrTodos","filter","task","_id","btnTodoRemove","event","preventDefault","target","btnEditTodo","forEach","value","title","prevTodoValue","body"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    readonly target: string\n    id: string\n    preventDefault(): void\n\n}\n\nconst TodosContainer = (): JSX.Element => {\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo tipisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos)\n            setTodos(getTodos)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n    useEffect(() => {\n        fetchTodos()\n    }, [])\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const deleteTodo = async (id: string): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await new TodoService().deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n               return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    //todo type\n    const btnTodoRemove = async (event: Event) => {\n        event.preventDefault()\n        const id = event.target.id\n\n         try {\n             await deleteTodo(id)\n         } catch (e) {\n            console.log('Error in function deleteTodo', e)\n         }\n        console.log(id)\n    }\n\n    //todo get todo id instead of event\n    const btnEditTodo = (e: any) => {\n        e.preventDefault()\n        const id = e.target.id\n        todos.forEach(todo => {\n            if (todo._id === id) {\n                const value = todo.title\n                console.log(id, value)\n                prevTodoValue(id, value)\n            }\n        })\n    }\n\n    const prevTodoValue = (id: string, value: string) => {\n        const body = {\n            _id: id,\n            title: value\n        }\n        console.log(body)\n    }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} />\n            <PopupContainer prevTodoValue={prevTodoValue} />\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}