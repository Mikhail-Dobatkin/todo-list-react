{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TodoService from '../../service/todoService/TodoService';\nimport { TodosComponent } from './todos-component';\nimport './style.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteBook } from '../../store/action-creators/todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodosContainer = _ref => {\n  _s();\n\n  let {\n    todos,\n    setTodos\n  } = _ref;\n  const dispatch = useDispatch();\n\n  const changeTodoState = changedTodo => {\n    todos.map(todo => {\n      if (changedTodo.id === todo._id) {\n        todo.isCheck = !todo.isCheck;\n      }\n\n      return todo;\n    });\n    setTodos([...todos]);\n  };\n\n  const toggleIsCheck = async todo => {\n    try {\n      const {\n        _id,\n        title,\n        isCheck\n      } = todo;\n      const body = {\n        id: _id,\n        title,\n        isCheck: !isCheck\n      };\n      dispatch(changeTodoState(body)); // await TodoService.updateTodo(body)\n\n      changeTodoState(body);\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      dispatch(deleteBook(id));\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosComponent, {\n    todos: todos,\n    deleteTodo: deleteTodo,\n    toggleIsCheck: toggleIsCheck\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodosContainer, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodoService","TodosComponent","useDispatch","deleteBook","TodosContainer","todos","setTodos","dispatch","changeTodoState","changedTodo","map","todo","id","_id","isCheck","toggleIsCheck","title","body","e","console","log","deleteTodo","newArrTodos","filter","task"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kCAA3B;;AAQA,OAAO,MAAMC,cAAc,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAyD;AACtF,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AACA,QAAMM,eAAe,GAAIC,WAAD,IAAsB;AAC5CJ,IAAAA,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAiB;AACzB,UAAIF,WAAW,CAACG,EAAZ,KAAmBD,IAAI,CAACE,GAA5B,EAAiC;AAC/BF,QAAAA,IAAI,CAACG,OAAL,GAAe,CAACH,IAAI,CAACG,OAArB;AACD;;AAED,aAAOH,IAAP;AACD,KAND;AAOAL,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GATD;;AAWA,QAAMU,aAAa,GAAG,MAAOJ,IAAP,IAAsC;AAC1D,QAAI;AACF,YAAM;AAAEE,QAAAA,GAAF;AAAOG,QAAAA,KAAP;AAAcF,QAAAA;AAAd,UAA0BH,IAAhC;AACA,YAAMM,IAAI,GAAG;AACXL,QAAAA,EAAE,EAAEC,GADO;AAEXG,QAAAA,KAFW;AAGXF,QAAAA,OAAO,EAAE,CAACA;AAHC,OAAb;AAKAP,MAAAA,QAAQ,CAACC,eAAe,CAACS,IAAD,CAAhB,CAAR,CAPE,CAQF;;AAEAT,MAAAA,eAAe,CAACS,IAAD,CAAf;AACD,KAXD,CAWE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,CAA/C;AACD;AACF,GAfD;;AAiBA,QAAMG,UAAU,GAAG,MAAOT,EAAP,IAAmD;AACpE,QAAI;AACF,YAAMD,IAAW,GAAG,MAAMX,WAAW,CAACqB,UAAZ,CAAuBT,EAAvB,CAA1B;AACAL,MAAAA,QAAQ,CAACJ,UAAU,CAACS,EAAD,CAAX,CAAR;AACA,YAAMU,WAAW,GAAGjB,KAAK,CAACkB,MAAN,CAAaC,IAAI,IAAI;AACvC,eAAOA,IAAI,CAACX,GAAL,KAAaF,IAAI,CAACE,GAAzB;AACD,OAFmB,CAApB;AAGAP,MAAAA,QAAQ,CAACgB,WAAD,CAAR;AACD,KAPD,CAOE,OAAOJ,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C;AACD;AACF,GAXD;;AAaA,sBACM,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEb,KAAvB;AAA8B,IAAA,UAAU,EAAEgB,UAA1C;AAAsD,IAAA,aAAa,EAAEN;AAArE;AAAA;AAAA;AAAA;AAAA,UADN;AAGD,CA9CM;;GAAMX,c;UACMF,W;;;KADNE,c","sourcesContent":["import React from 'react'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosComponent } from './todos-component'\nimport { ITodo } from '../../models/interface/interface'\nimport './style.css'\nimport { useDispatch } from 'react-redux'\nimport { deleteBook } from '../../store/action-creators/todo'\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITodo[]\n    setTodos: (body: ITodo[]) => void\n}\n\nexport const TodosContainer = ({ todos, setTodos }: TodosContainerProp): JSX.Element => {\n  const dispatch = useDispatch()\n  const changeTodoState = (changedTodo: any) => {\n    todos.map((todo: ITodo) => {\n      if (changedTodo.id === todo._id) {\n        todo.isCheck = !todo.isCheck\n      }\n\n      return todo\n    })\n    setTodos([...todos])\n  }\n\n  const toggleIsCheck = async (todo: ITodo): Promise<void> => {\n    try {\n      const { _id, title, isCheck } = todo\n      const body = {\n        id: _id,\n        title,\n        isCheck: !isCheck\n      }\n      dispatch(changeTodoState(body))\n      // await TodoService.updateTodo(body)\n\n      changeTodoState(body)\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e)\n    }\n  }\n\n  const deleteTodo = async (id: ITodo['_id']): Promise<ITodo | void> => {\n    try {\n      const todo: ITodo = await TodoService.deleteTodo(id)\n      dispatch(deleteBook(id))\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id\n      })\n      setTodos(newArrTodos)\n    } catch (e) {\n      console.log('Error in function deleteTodo', e)\n    }\n  }\n\n  return (\n        <TodosComponent todos={todos} deleteTodo={deleteTodo} toggleIsCheck={toggleIsCheck} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}