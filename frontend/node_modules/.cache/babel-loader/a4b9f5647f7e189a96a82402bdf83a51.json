{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TodosContainer } from '../todos-container/todos-container';\nimport { TodoFormContainer } from '../todo-form/todo-form-container'; // import { fetchTodos } from '../../store/action-creators/action-creator'\n\nimport { fetchTodos } from '../../store/action-creators/action';\nimport { store } from '../../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  var _store$getState$books;\n\n  const [todos, setTodos] = useState([]);\n  const dispatch = useDispatch(); // @ts-ignore\n  // const { books } = useSelector(state => state.books)\n\n  const {\n    books\n  } = store.getState().books;\n  const newArr = books;\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, []);\n  console.log((_store$getState$books = store.getState().books) === null || _store$getState$books === void 0 ? void 0 : _store$getState$books.books);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoFormContainer\n    /* newTaskHandler={newTaskHandler} */\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos,\n      todos: newArr,\n      setTodos: setTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"ojfqlqJTAe8tqf8hhs+wvmnuFvo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useEffect","useState","useDispatch","TodosContainer","TodoFormContainer","fetchTodos","store","MainContainer","todos","setTodos","dispatch","books","getState","newArr","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAAyC,aAAzC;AAEA,SAASC,cAAT,QAA+B,oCAA/B;AAEA,SAASC,iBAAT,QAAkC,kCAAlC,C,CACA;;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,KAAT,QAAsB,aAAtB;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAmB;AAAA;;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAU,EAAV,CAAlC;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B,CAF8C,CAI9C;AACA;;AACA,QAAM;AAAES,IAAAA;AAAF,MAAYL,KAAK,CAACM,QAAN,GAAiBD,KAAnC;AACA,QAAME,MAAM,GAAGF,KAAf;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGAS,EAAAA,OAAO,CAACC,GAAR,0BAAYT,KAAK,CAACM,QAAN,GAAiBD,KAA7B,0DAAY,sBAAwBA,KAApC;AACA,sBACU;AAAA,4BACI,QAAC;AAAkB;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AACI,MAAA,UAAU,EAAEN,UADhB;AAEI,MAAA,KAAK,EAAEQ,MAFX;AAGI,MAAA,QAAQ,EAAEJ;AAHd;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADV;AAUD,CAvBM;;GAAMF,a;UAEML,W;;;KAFNK,a","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosContainer } from '../todos-container/todos-container'\nimport { ITodo } from '../../models/interface/interface'\nimport { TodoFormContainer } from '../todo-form/todo-form-container'\n// import { fetchTodos } from '../../store/action-creators/action-creator'\nimport { fetchTodos } from '../../store/action-creators/action'\nimport { store } from '../../store'\n\nexport const MainContainer = (): JSX.Element => {\n  const [todos, setTodos] = useState<ITodo[]>([])\n  const dispatch = useDispatch()\n\n  // @ts-ignore\n  // const { books } = useSelector(state => state.books)\n  const { books } = store.getState().books\n  const newArr = books\n\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [])\n  console.log(store.getState().books?.books)\n  return (\n            <>\n                <TodoFormContainer /* newTaskHandler={newTaskHandler} */ />\n                <TodosContainer\n                    fetchTodos={fetchTodos}\n                    todos={newArr}\n                    setTodos={setTodos}\n                />\n            </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}