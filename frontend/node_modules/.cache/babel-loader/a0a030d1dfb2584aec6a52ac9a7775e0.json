{"ast":null,"code":"import { TodoActionTypes } from '../types/typesTodo';\nimport TodoService from '../../service/todoService/TodoService';\nexport const fetchTodos = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: TodoActionTypes.FETCH_TODOS\n      });\n      const todos = await TodoService.getAllTodos();\n      dispatch({\n        type: TodoActionTypes.FETCH_TODOS_SUCCESS,\n        payload: todos\n      });\n      console.log(todos);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}; // export const createBook = (book: ITodo) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       dispatch({ type: TodoActionTypes.CREATE_TODO })\n//       const createdBook = await TodoService.createNewTodo(book)\n//       dispatch({ type: TodoActionTypes.CREATE_TODO_SUCCESS, payload: createdBook })\n//     } catch (e) {\n//       console.log('Error in createBook', e)\n//     }\n//   }\n// }\n//\n// export const deleteBook = (index: ITodo['_id']) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       const deleteBook = await TodoService.deleteTodo(index)\n//       dispatch({ type: TodoActionTypes.DELETE_TODO_SUCCESS, payload: deleteBook })\n//     } catch (e) {\n//       console.log('Error in function deleteBook', e)\n//     }\n//   }\n// }\n//\n// export const changeTodo = (todo: ITodo) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       dispatch({ type: TodoActionTypes.CHANGE_TODO })\n//       const changedTodoState = await TodoService.updateTodo(todo)\n//       dispatch({ type: TodoActionTypes.CHANGE_TODO_STATE_SUCCESS, payload: changedTodoState })\n//     } catch (e) {\n//       console.log('Error in changeTodoState function', e)\n//     }\n//   }\n// }","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/store/action-creators/action-creator.ts"],"names":["TodoActionTypes","TodoService","fetchTodos","dispatch","type","FETCH_TODOS","todos","getAllTodos","FETCH_TODOS_SUCCESS","payload","console","log","e"],"mappings":"AAAA,SAAqBA,eAArB,QAA4C,oBAA5C;AAEA,OAAOC,WAAP,MAAwB,uCAAxB;AAGA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAOC,QAAP,IAA0C;AAC/C,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,eAAe,CAACK;AAAxB,OAAD,CAAR;AACA,YAAMC,KAAK,GAAG,MAAML,WAAW,CAACM,WAAZ,EAApB;AACAJ,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,eAAe,CAACQ,mBAAxB;AAA6CC,QAAAA,OAAO,EAAEH;AAAtD,OAAD,CAAR;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD,KALD,CAKE,OAAOM,CAAP,EAAU;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACD;AACF,GATD;AAUD,CAXM,C,CAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { TodoAction, TodoActionTypes } from '../types/typesTodo'\nimport { Dispatch } from 'redux'\nimport TodoService from '../../service/todoService/TodoService'\nimport { ITodo } from '../../models/interface/interface'\n\nexport const fetchTodos = () => {\n  return async (dispatch: Dispatch<TodoAction>) => {\n    try {\n      dispatch({ type: TodoActionTypes.FETCH_TODOS })\n      const todos = await TodoService.getAllTodos()\n      dispatch({ type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: todos })\n      console.log(todos)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n\n// export const createBook = (book: ITodo) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       dispatch({ type: TodoActionTypes.CREATE_TODO })\n//       const createdBook = await TodoService.createNewTodo(book)\n//       dispatch({ type: TodoActionTypes.CREATE_TODO_SUCCESS, payload: createdBook })\n//     } catch (e) {\n//       console.log('Error in createBook', e)\n//     }\n//   }\n// }\n//\n// export const deleteBook = (index: ITodo['_id']) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       const deleteBook = await TodoService.deleteTodo(index)\n//       dispatch({ type: TodoActionTypes.DELETE_TODO_SUCCESS, payload: deleteBook })\n//     } catch (e) {\n//       console.log('Error in function deleteBook', e)\n//     }\n//   }\n// }\n//\n// export const changeTodo = (todo: ITodo) => {\n//   return async (dispatch: Dispatch<TodoAction>) => {\n//     try {\n//       dispatch({ type: TodoActionTypes.CHANGE_TODO })\n//       const changedTodoState = await TodoService.updateTodo(todo)\n//       dispatch({ type: TodoActionTypes.CHANGE_TODO_STATE_SUCCESS, payload: changedTodoState })\n//     } catch (e) {\n//       console.log('Error in changeTodoState function', e)\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}