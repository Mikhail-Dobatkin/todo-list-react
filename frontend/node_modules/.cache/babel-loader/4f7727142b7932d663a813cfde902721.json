{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = _ref => {\n  _s();\n\n  let {\n    fetchTodos,\n    newTaskHandler,\n    todos,\n    btnTodoRemove,\n    changeTodoHandler,\n    prevTodoValue,\n    todoIsCheck\n  } = _ref;\n  // const [todos, setTodos] = useState<ITask[]>([])\n  //\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState(''); //\n  // const fetchTodos = async (): Promise<void> => {\n  //     try {\n  //         //todo typisation utility types\n  //         const getTodos: any = await TodoService.getAllTodos()\n  //         console.log(getTodos)\n  //         setTodos(getTodos)\n  //     } catch (e) {\n  //         console.log('Error in fetchTodos', e)\n  //     }\n  // }\n  //\n\n  useEffect(() => {\n    fetchTodos();\n  }, []); // const newTaskHandler = (newTask: ITask) => {\n  //     setTodos([newTask, ...todos])\n  // }\n  // const changeTodoHandler = (changeTodo: ITask, id: string) => {\n  //    todos.map((todo, index) => {\n  //        if(id === todo._id) {\n  //            const prevArr = todos.splice(index, 1, changeTodo)\n  //            const arr = [...todos]\n  //            setTodos(arr)\n  //        } else {\n  //            console.log('не сработало')\n  //        }\n  //    })\n  // }\n  // const deleteTodo = async (id: string): Promise<ITask | void> => {\n  //     try {\n  //         const todo: ITask = await TodoService.deleteTodo(id)\n  //         const newArrTodos = todos.filter(task => {\n  //            return task._id !== todo._id\n  //         })\n  //         setTodos(newArrTodos)\n  //     } catch (e) {\n  //         console.log('Error in function deleteTodo', e)\n  //     }\n  // }\n  // const btnTodoRemove = async (event: Event) => {\n  //     event.preventDefault()\n  //     if (\"id\" in event.target) {\n  //         const id = event.target.id\n  //         try {\n  //             await deleteTodo(id)\n  //         } catch (e) {\n  //             console.log('Error in function deleteTodo', e)\n  //         }\n  //         console.log(id)\n  //     }\n  // }\n  //todo get todo id instead of event\n\n  const btnEditTodo = e => {\n    e.preventDefault();\n\n    if ('id' in e.target) {\n      const id = e.target.id;\n      todos.forEach(todo => {\n        if (todo._id === id) {\n          const value = todo.title;\n          prevTodoValue(id, value);\n          setTodoTitlePrev(value);\n          setTodoId(id);\n        }\n      });\n    }\n  }; // const prevTodoValue = (id: string, value: string) => {\n  //     const body = {\n  //         _id: id,\n  //         title: value\n  //     }\n  //     console.log(body)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      prevValue: prevValueTitle,\n      indexTodoChanged: indexTodoChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"/5H482R1UD8kwforEMR+RcifBcs=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","PopupContainer","TodosComponent","TodoForm","TodosContainer","fetchTodos","newTaskHandler","todos","btnTodoRemove","changeTodoHandler","prevTodoValue","todoIsCheck","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","btnEditTodo","e","preventDefault","target","id","forEach","todo","_id","value","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,aAAP;;;;AAgBA,MAAMC,cAAc,GAAG,QAQwB;AAAA;;AAAA,MARvB;AAChBC,IAAAA,UADgB;AAEhBC,IAAAA,cAFgB;AAGhBC,IAAAA,KAHgB;AAIhBC,IAAAA,aAJgB;AAKhBC,IAAAA,iBALgB;AAMhBC,IAAAA,aANgB;AAOhBC,IAAAA;AAPgB,GAQuB;AAE3C;AACA;AACA,QAAM,CAACC,cAAD,EAAiBC,gBAAjB,IAAqCb,QAAQ,CAAS,EAAT,CAAnD;AACA,QAAM,CAACc,gBAAD,EAAmBC,SAAnB,IAAgCf,QAAQ,CAAS,EAAT,CAA9C,CAL2C,CAM3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,EAAAA,SAAS,CAAE,MAAM;AACbM,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT,CAlB2C,CAsB3C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMW,WAAW,GAAIC,CAAD,IAAc;AAC9BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,QAAQD,CAAC,CAACE,MAAb,EAAqB;AACjB,YAAMC,EAAE,GAAGH,CAAC,CAACE,MAAF,CAASC,EAApB;AACAb,MAAAA,KAAK,CAACc,OAAN,CAAcC,IAAI,IAAI;AAClB,YAAIA,IAAI,CAACC,GAAL,KAAaH,EAAjB,EAAqB;AACjB,gBAAMI,KAAK,GAAGF,IAAI,CAACG,KAAnB;AACAf,UAAAA,aAAa,CAACU,EAAD,EAAKI,KAAL,CAAb;AACAX,UAAAA,gBAAgB,CAACW,KAAD,CAAhB;AACAT,UAAAA,SAAS,CAACK,EAAD,CAAT;AACH;AACJ,OAPD;AAQH;AACJ,GAbD,CAhE2C,CA+E3C;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEd;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAEC,KAAvB;AAA8B,MAAA,aAAa,EAAEC,aAA7C;AAA4D,MAAA,WAAW,EAAEQ,WAAzE;AAAsF,MAAA,WAAW,EAAEL;AAAnG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,cAAD;AAAgB,MAAA,iBAAiB,EAAEF,iBAAnC;AAAsD,MAAA,aAAa,EAAEC,aAArE;AAAoF,MAAA,SAAS,EAAEE,cAA/F;AAA+G,MAAA,gBAAgB,EAAEE;AAAjI;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CAtGD;;GAAMV,c;;KAAAA,c;AAwGN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    newTaskHandler: (body: ITask) => void\n    todos: ITask[]\n    btnTodoRemove: (e: React.MouseEvent<HTMLButtonElement>) => Promise<void>\n    changeTodoHandler: (body: ITask, id: string) => void\n    prevTodoValue: (id: string, value: string) => void\n    todoIsCheck: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst TodosContainer = ({\n        fetchTodos,\n        newTaskHandler,\n        todos,\n        btnTodoRemove,\n        changeTodoHandler,\n        prevTodoValue,\n        todoIsCheck\n        }: TodosContainerProp): JSX.Element => {\n\n    // const [todos, setTodos] = useState<ITask[]>([])\n    //\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n    //\n    // const fetchTodos = async (): Promise<void> => {\n    //     try {\n    //         //todo typisation utility types\n    //         const getTodos: any = await TodoService.getAllTodos()\n    //         console.log(getTodos)\n    //         setTodos(getTodos)\n    //     } catch (e) {\n    //         console.log('Error in fetchTodos', e)\n    //     }\n    // }\n    //\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n    // const newTaskHandler = (newTask: ITask) => {\n    //     setTodos([newTask, ...todos])\n    // }\n\n    // const changeTodoHandler = (changeTodo: ITask, id: string) => {\n    //    todos.map((todo, index) => {\n    //        if(id === todo._id) {\n    //            const prevArr = todos.splice(index, 1, changeTodo)\n    //            const arr = [...todos]\n    //            setTodos(arr)\n    //        } else {\n    //            console.log('не сработало')\n    //        }\n    //    })\n    // }\n\n    // const deleteTodo = async (id: string): Promise<ITask | void> => {\n    //     try {\n    //         const todo: ITask = await TodoService.deleteTodo(id)\n    //         const newArrTodos = todos.filter(task => {\n    //            return task._id !== todo._id\n    //         })\n    //         setTodos(newArrTodos)\n    //     } catch (e) {\n    //         console.log('Error in function deleteTodo', e)\n    //     }\n    // }\n\n    // const btnTodoRemove = async (event: Event) => {\n    //     event.preventDefault()\n    //     if (\"id\" in event.target) {\n    //         const id = event.target.id\n    //         try {\n    //             await deleteTodo(id)\n    //         } catch (e) {\n    //             console.log('Error in function deleteTodo', e)\n    //         }\n    //         console.log(id)\n    //     }\n    // }\n\n    //todo get todo id instead of event\n    const btnEditTodo = (e: Event) => {\n        e.preventDefault()\n        if('id' in e.target) {\n            const id = e.target.id\n            todos.forEach(todo => {\n                if (todo._id === id) {\n                    const value = todo.title\n                    prevTodoValue(id, value)\n                    setTodoTitlePrev(value)\n                    setTodoId(id)\n                }\n            })\n        }\n    }\n\n    // const prevTodoValue = (id: string, value: string) => {\n    //     const body = {\n    //         _id: id,\n    //         title: value\n    //     }\n    //     console.log(body)\n    // }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} todoIsCheck={todoIsCheck}/>\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} prevValue={prevValueTitle} indexTodoChanged={indexTodoChanged}/>\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}