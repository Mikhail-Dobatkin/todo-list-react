{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\";\nimport React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { TodosComponent } from \"./todos-component\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodosContainer = _ref => {\n  let {\n    todos,\n    setTodos\n  } = _ref;\n\n  //todo any in all project\n  //todo rename\n  const changeTodoState = changedTodo => {\n    todos.map(todo => {\n      if (changedTodo.id === todo._id) {\n        todo.isCheck = !todo.isCheck;\n      }\n    });\n    setTodos([...todos]);\n  };\n\n  const toggleIsCheck = async todo => {\n    try {\n      const {\n        _id,\n        title,\n        isCheck\n      } = todo;\n      const body = {\n        id: _id,\n        title,\n        isCheck: !isCheck\n      };\n      await TodoService.updateTodo(body);\n      changeTodoState(body);\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosComponent, {\n    todos: todos,\n    deleteTodo: deleteTodo,\n    toggleIsCheck: toggleIsCheck\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_c = TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodoService","TodosComponent","TodosContainer","todos","setTodos","changeTodoState","changedTodo","map","todo","id","_id","isCheck","toggleIsCheck","title","body","updateTodo","e","console","log","deleteTodo","newArrTodos","filter","task"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,aAAP;;AAQA,OAAO,MAAMC,cAAc,GAAG,QAAwD;AAAA,MAAvD;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAuD;;AAClF;AACA;AACA,QAAMC,eAAe,GAAIC,WAAD,IAAsB;AACzCH,IAAAA,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAiB;AACxB,UAAIF,WAAW,CAACG,EAAZ,KAAmBD,IAAI,CAACE,GAA5B,EAAiC;AAC7BF,QAAAA,IAAI,CAACG,OAAL,GAAe,CAACH,IAAI,CAACG,OAArB;AACH;AACJ,KAJA;AAMDP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACH,GARD;;AAUA,QAAMS,aAAa,GAAG,MAAOJ,IAAP,IAAsC;AACxD,QAAI;AACA,YAAM;AAACE,QAAAA,GAAD;AAAMG,QAAAA,KAAN;AAAaF,QAAAA;AAAb,UAAwBH,IAA9B;AACA,YAAMM,IAAI,GAAG;AACTL,QAAAA,EAAE,EAAEC,GADK;AAETG,QAAAA,KAFS;AAGTF,QAAAA,OAAO,EAAE,CAACA;AAHD,OAAb;AAKA,YAAMX,WAAW,CAACe,UAAZ,CAAuBD,IAAvB,CAAN;AACAT,MAAAA,eAAe,CAACS,IAAD,CAAf;AACH,KATD,CASE,OAAOE,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,CAA/C;AACH;AACJ,GAbD;;AAeA,QAAMG,UAAU,GAAG,MAAOV,EAAP,IAAmD;AAClE,QAAI;AAEA,YAAMD,IAAW,GAAG,MAAMR,WAAW,CAACmB,UAAZ,CAAuBV,EAAvB,CAA1B;AAEA,YAAMW,WAAW,GAAGjB,KAAK,CAACkB,MAAN,CAAaC,IAAI,IAAI;AACrC,eAAOA,IAAI,CAACZ,GAAL,KAAaF,IAAI,CAACE,GAAzB;AACH,OAFmB,CAApB;AAGAN,MAAAA,QAAQ,CAACgB,WAAD,CAAR;AACH,KARD,CAQE,OAAOJ,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C;AACH;AACJ,GAZD;;AAcA,sBACI,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEb,KAAvB;AAA8B,IAAA,UAAU,EAAEgB,UAA1C;AAAsD,IAAA,aAAa,EAAEP;AAArE;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA7CM;KAAMV,c","sourcesContent":["import React from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { TodosComponent } from \"./todos-component\";\nimport { ITodo } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITodo[]\n    setTodos: (body: ITodo[]) => void\n}\n\nexport const TodosContainer = ({todos, setTodos}: TodosContainerProp): JSX.Element => {\n    //todo any in all project\n    //todo rename\n    const changeTodoState = (changedTodo: any) => {\n         todos.map((todo: ITodo) => {\n            if (changedTodo.id === todo._id) {\n                todo.isCheck = !todo.isCheck\n            }\n        })\n\n        setTodos([...todos])\n    }\n\n    const toggleIsCheck = async (todo: ITodo): Promise<void> => {\n        try {\n            const {_id, title, isCheck} = todo\n            const body = {\n                id: _id,\n                title,\n                isCheck: !isCheck\n            }\n            await TodoService.updateTodo(body)\n            changeTodoState(body)\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const deleteTodo = async (id: ITodo[\"_id\"]): Promise<ITodo | void> => {\n        try {\n\n            const todo: ITodo = await TodoService.deleteTodo(id)\n\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    return (\n        <TodosComponent todos={todos} deleteTodo={deleteTodo} toggleIsCheck={toggleIsCheck} />\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}