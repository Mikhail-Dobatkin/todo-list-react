{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = _ref => {\n  _s();\n\n  let {\n    prevTodoValue\n  } = _ref;\n  const [todos, setTodos] = useState([]);\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState('');\n\n  const fetchTodos = async () => {\n    try {\n      //todo typisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos);\n      setTodos(getTodos);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const changeTodoHandler = changeTodo => {\n    todos.map((todo, index) => {\n      if (changeTodo._id === todo._id) {\n        const prevArr = todos.slice(0, index);\n        const arr = todos.slice(index);\n        const newArr = [...prevArr, changeTodo, ...arr];\n        setTodos(newArr);\n        console.log(newArr);\n      }\n    });\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const btnTodoRemove = async event => {\n    event.preventDefault();\n\n    if (\"id\" in event.target) {\n      const id = event.target.id;\n\n      try {\n        await deleteTodo(id);\n      } catch (e) {\n        console.log('Error in function deleteTodo', e);\n      }\n\n      console.log(id);\n    }\n  }; //todo get todo id instead of event\n\n\n  const btnEditTodo = e => {\n    e.preventDefault();\n\n    if ('id' in e.target) {\n      const id = e.target.id;\n      todos.forEach(todo => {\n        if (todo._id === id) {\n          const value = todo.title;\n          prevTodoValue(id, value);\n          setTodoTitlePrev(value);\n          setTodoId(id);\n        }\n      });\n    }\n  }; // const prevTodoValue = (id: string, value: string) => {\n  //     const body = {\n  //         _id: id,\n  //         title: value\n  //     }\n  //     console.log(body)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      prevValue: prevValueTitle,\n      indexTodoChanged: indexTodoChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"CFPY0ydi8OnZCpnO7pqPCFc+JIo=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","prevTodoValue","todos","setTodos","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","fetchTodos","getTodos","getAllTodos","console","log","e","newTaskHandler","newTask","changeTodoHandler","changeTodo","map","todo","index","_id","prevArr","slice","arr","newArr","deleteTodo","id","newArrTodos","filter","task","btnTodoRemove","event","preventDefault","target","btnEditTodo","forEach","value","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\n\ninterface TodosContainerProp {\n    prevTodoValue: (id: string, body: string) => void\n}\n\nconst TodosContainer = ({prevTodoValue}: TodosContainerProp): JSX.Element => {\n\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo typisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos)\n            setTodos(getTodos)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const changeTodoHandler = (changeTodo: ITask) => {\n       todos.map((todo, index) => {\n           if(changeTodo._id === todo._id) {\n               const prevArr = todos.slice(0, index)\n               const arr = todos.slice(index)\n               const newArr = [...prevArr, changeTodo, ...arr]\n               setTodos(newArr)\n               console.log(newArr)\n           }\n       })\n    }\n\n    const deleteTodo = async (id: string): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n               return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n\n    const btnTodoRemove = async (event: Event) => {\n        event.preventDefault()\n        if (\"id\" in event.target) {\n            const id = event.target.id\n            try {\n                await deleteTodo(id)\n            } catch (e) {\n                console.log('Error in function deleteTodo', e)\n            }\n            console.log(id)\n        }\n    }\n\n    //todo get todo id instead of event\n    const btnEditTodo = (e: Event) => {\n        e.preventDefault()\n        if('id' in e.target) {\n            const id = e.target.id\n            todos.forEach(todo => {\n                if (todo._id === id) {\n                    const value = todo.title\n                    prevTodoValue(id, value)\n                    setTodoTitlePrev(value)\n                    setTodoId(id)\n                }\n            })\n        }\n    }\n\n    // const prevTodoValue = (id: string, value: string) => {\n    //     const body = {\n    //         _id: id,\n    //         title: value\n    //     }\n    //     console.log(body)\n    // }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} prevValue={prevValueTitle} indexTodoChanged={indexTodoChanged}/>\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}