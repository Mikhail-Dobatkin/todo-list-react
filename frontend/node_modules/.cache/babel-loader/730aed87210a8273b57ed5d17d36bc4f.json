{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport TodoForm from \"../todo-form/todo-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]); //todo ove to todos container\n\n  const fetchTodos = async () => {\n    try {\n      //todo typisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos);\n      return setTodos(getTodos);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []); //     const newTaskHandler = (newTask: ITask) => {\n  //         setTodos([newTask, ...todos])\n  //     }\n  //\n  //     const changeTodoHandler = (changeTodo: ITask, id: ITask[\"_id\"]) => {\n  //         todos.map((todo, index) => {\n  //             if(id === todo._id) {\n  //                 const prevArr = todos.splice(index, 1, changeTodo)\n  //                 const arr = [...todos]\n  //                 setTodos(arr)\n  //             } else {\n  //                 console.log('не сработало')\n  //             }\n  //         })\n  //     }\n  //\n  //     const changeCheck = (body: ITask) => {\n  // console.log(body)\n  //     }\n  //\n  //     //todo move to todo container\n  //     const deleteTodo = async (id: ITask[\"_id\"]): Promise<ITask | void> => {\n  //         try {\n  //             const todo: ITask = await TodoService.deleteTodo(id)\n  //             const newArrTodos = todos.filter(task => {\n  //                 return task._id !== todo._id\n  //             })\n  //             setTodos(newArrTodos)\n  //         } catch (e) {\n  //             console.log('Error in function deleteTodo', e)\n  //         }\n  //     }\n  //     const btnTodoRemove = async (id: ITask[\"_id\"]) => {\n  //\n  //             try {\n  //                 await deleteTodo(id)\n  //             } catch (e) {\n  //                 console.log('Error in function deleteTodo', e)\n  //             }\n  //     }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos,\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      changeTodoHandler: changeTodoHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useEffect","useState","TodosContainer","TodoService","TodoForm","MainContainer","todos","setTodos","fetchTodos","getTodos","getAllTodos","console","log","e","newTaskHandler","btnTodoRemove","changeTodoHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAmB;AAAA;;AAE5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAU,EAAV,CAAlC,CAF4C,CAI5C;;AACA,QAAMO,UAAU,GAAG,YAA2B;AAC1C,QAAI;AACA;AACA,YAAMC,QAAa,GAAG,MAAMN,WAAW,CAACO,WAAZ,EAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOF,QAAQ,CAACE,QAAD,CAAf;AACH,KALD,CAKE,OAAOI,CAAP,EAAU;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,CAAnC;AACH;AACJ,GATD;;AAWAb,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT,CAhB4C,CAoBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,sBACQ;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEM;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,cAAD;AAAgB,MAAA,UAAU,EAAEN,UAA5B;AACgB,MAAA,KAAK,EAAEF,KADvB;AAEgB,MAAA,aAAa,EAAES,aAF/B;AAGgB,MAAA,iBAAiB,EAAEC;AAHnC;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADR;AAWH,CAxEM;;GAAMX,a;;KAAAA,a","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport {ITask} from \"../../models/interface/interface\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport TodoForm from \"../todo-form/todo-form\";\n\nexport const MainContainer = (): JSX.Element => {\n\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    //todo ove to todos container\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo typisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos)\n            return setTodos(getTodos)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n//     const newTaskHandler = (newTask: ITask) => {\n//         setTodos([newTask, ...todos])\n//     }\n//\n//     const changeTodoHandler = (changeTodo: ITask, id: ITask[\"_id\"]) => {\n//         todos.map((todo, index) => {\n//             if(id === todo._id) {\n//                 const prevArr = todos.splice(index, 1, changeTodo)\n//                 const arr = [...todos]\n//                 setTodos(arr)\n//             } else {\n//                 console.log('не сработало')\n//             }\n//         })\n//     }\n//\n//     const changeCheck = (body: ITask) => {\n// console.log(body)\n//     }\n//\n//     //todo move to todo container\n//     const deleteTodo = async (id: ITask[\"_id\"]): Promise<ITask | void> => {\n//         try {\n//             const todo: ITask = await TodoService.deleteTodo(id)\n//             const newArrTodos = todos.filter(task => {\n//                 return task._id !== todo._id\n//             })\n//             setTodos(newArrTodos)\n//         } catch (e) {\n//             console.log('Error in function deleteTodo', e)\n//         }\n//     }\n//     const btnTodoRemove = async (id: ITask[\"_id\"]) => {\n//\n//             try {\n//                 await deleteTodo(id)\n//             } catch (e) {\n//                 console.log('Error in function deleteTodo', e)\n//             }\n//     }\n\n    return (\n            <>\n                <TodoForm newTaskHandler={newTaskHandler} />\n\n                <TodosContainer fetchTodos={fetchTodos}\n                                todos={todos}\n                                btnTodoRemove={btnTodoRemove}\n                                changeTodoHandler={changeTodoHandler} />\n\n            </>\n    )\n}"]},"metadata":{},"sourceType":"module"}