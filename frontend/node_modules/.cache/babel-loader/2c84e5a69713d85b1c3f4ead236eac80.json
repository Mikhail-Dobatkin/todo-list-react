{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport TodoForm from \"../todo-form/todo-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]); //todo ove to todos container\n\n  const fetchTodos = async () => {\n    try {\n      //todo typisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos);\n      return setTodos(getTodos);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const changeTodoHandler = (changeTodo, id) => {\n    todos.map((todo, index) => {\n      if (id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...todos];\n        setTodos(arr);\n      } else {\n        console.log('не сработало');\n      }\n    });\n  };\n\n  const changeCheck = body => {\n    console.log(body);\n  }; //todo move to todo container\n\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const btnTodoRemove = async id => {\n    try {\n      await deleteTodo(id);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const prevTodoValue = (id, value) => {\n    const body = {\n      _id: id,\n      title: value\n    };\n    console.log(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos,\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      prevTodoValue: prevTodoValue,\n      changeTodoHandler: changeTodoHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useState","TodosContainer","TodoService","TodoForm","MainContainer","todos","setTodos","fetchTodos","getTodos","getAllTodos","console","log","e","newTaskHandler","newTask","changeTodoHandler","changeTodo","id","map","todo","index","_id","prevArr","splice","arr","changeCheck","body","deleteTodo","newArrTodos","filter","task","btnTodoRemove","prevTodoValue","value","title"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport {ITask} from \"../../models/interface/interface\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport TodoForm from \"../todo-form/todo-form\";\n\nexport const MainContainer = (): JSX.Element => {\n\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    //todo ove to todos container\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo typisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos)\n            return setTodos(getTodos)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const changeTodoHandler = (changeTodo: ITask, id: ITask[\"_id\"]) => {\n        todos.map((todo, index) => {\n            if(id === todo._id) {\n                const prevArr = todos.splice(index, 1, changeTodo)\n                const arr = [...todos]\n                setTodos(arr)\n            } else {\n                console.log('не сработало')\n            }\n        })\n    }\n\n    const changeCheck = (body: ITask) => {\nconsole.log(body)\n    }\n\n    //todo move to todo container\n    const deleteTodo = async (id: ITask[\"_id\"]): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n    const btnTodoRemove = async (id: ITask[\"_id\"]) => {\n\n            try {\n                await deleteTodo(id)\n            } catch (e) {\n                console.log('Error in function deleteTodo', e)\n            }\n    }\n\n    const prevTodoValue = (id: string, value: string) => {\n        const body = {\n            _id: id,\n            title: value\n        }\n        console.log(body)\n    }\n\n    return (\n            <>\n                <TodoForm newTaskHandler={newTaskHandler} />\n\n                <TodosContainer fetchTodos={fetchTodos}\n                                todos={todos}\n                                btnTodoRemove={btnTodoRemove}\n                                prevTodoValue={prevTodoValue}\n                                changeTodoHandler={changeTodoHandler} />\n\n            </>\n    )\n}"]},"metadata":{},"sourceType":"module"}