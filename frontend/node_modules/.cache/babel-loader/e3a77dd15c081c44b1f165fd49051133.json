{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/components/task-add/task-add.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './style.css';\nimport TaskApi from \"../TaskApi/TaskApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskAdd = _ref => {\n  _s();\n\n  let {\n    tasks\n  } = _ref;\n  const [input, setInput] = useState('');\n  const [task, setTask] = useState([]);\n  const [newTask, setNewTask] = useState([]);\n  useEffect(() => {\n    fetchTask();\n  }, []);\n\n  const createTask = async body => {\n    try {\n      const response = await new TaskApi().createNewTask(body);\n      const newArr = [...tasks, response];\n      setTask(newArr);\n    } catch (e) {\n      console.log('Error on POST query', e);\n    }\n  };\n\n  const fetchTask = async () => {\n    try {\n      const response = await new TaskApi().getAllTasks();\n      setTask(response);\n    } catch (e) {\n      console.log('qwe', e);\n    }\n  };\n\n  const changeHandler = e => {\n    const value = e.target.value;\n    setInput(value);\n  };\n\n  const clickHandler = e => {\n    e.preventDefault();\n    const body = {\n      title: input,\n      isCheck: false\n    };\n    createTask(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-add\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      onChange: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: clickHandler,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskAdd, \"HmTj2VQhPyNvNvCtDUHG1pNX5D8=\");\n\n_c = TaskAdd;\nexport default TaskAdd;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskAdd\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/components/task-add/task-add.tsx"],"names":["React","useEffect","useState","TaskApi","TaskAdd","tasks","input","setInput","task","setTask","newTask","setNewTask","fetchTask","createTask","body","response","createNewTask","newArr","e","console","log","getAllTasks","changeHandler","value","target","clickHandler","preventDefault","title","isCheck"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,OAAO,aAAP;AAEA,OAAOC,OAAP,MAAoB,oBAApB;;;AAMA,MAAMC,OAAwB,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAE1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAU,EAAV,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAU,EAAV,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,UAAU,GAAG,MAAOC,IAAP,IAAuB;AACtC,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAM,IAAIZ,OAAJ,GAAca,aAAd,CAA4BF,IAA5B,CAAvB;AACA,YAAMG,MAAM,GAAG,CAAC,GAAGZ,KAAJ,EAAWU,QAAX,CAAf;AACAN,MAAAA,OAAO,CAACQ,MAAD,CAAP;AAEH,KALD,CAKE,OAAOC,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,CAAnC;AACH;AACJ,GATD;;AAUA,QAAMN,SAAS,GAAG,YAAqC;AACnD,QAAI;AACA,YAAMG,QAAa,GAAG,MAAM,IAAIZ,OAAJ,GAAckB,WAAd,EAA5B;AACAZ,MAAAA,OAAO,CAACM,QAAD,CAAP;AACH,KAHD,CAGE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,CAAnB;AACH;AACJ,GAPD;;AASA,QAAMI,aAAa,GAAIJ,CAAD,IAA4C;AAC9D,UAAMK,KAAK,GAAGL,CAAC,CAACM,MAAF,CAASD,KAAvB;AACAhB,IAAAA,QAAQ,CAACgB,KAAD,CAAR;AACH,GAHD;;AAKA,QAAME,YAAY,GAAIP,CAAD,IAA4C;AAC7DA,IAAAA,CAAC,CAACQ,cAAF;AACA,UAAMZ,IAAW,GAAG;AAChBa,MAAAA,KAAK,EAAErB,KADS;AAEhBsB,MAAAA,OAAO,EAAE;AAFO,KAApB;AAIAf,IAAAA,UAAU,CAACC,IAAD,CAAV;AACH,GAPD;;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,OAA/B;AAAuC,MAAA,QAAQ,EAAEQ;AAAjD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEG,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAhDD;;GAAMrB,O;;KAAAA,O;AAiDN,eAAeA,OAAf","sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\nimport './style.css'\nimport {ITask} from \"../interface/interface\";\nimport TaskApi from \"../TaskApi/TaskApi\";\n\ninterface TaskAddProp {\n    tasks: ITask[]\n}\n\nconst TaskAdd: FC<TaskAddProp> = ({tasks}) => {\n\n    const [input, setInput] = useState('')\n    const [task, setTask] = useState<ITask[]>([])\n    const [newTask, setNewTask] = useState<ITask[]>([])\n\n    useEffect(() => {\n        fetchTask()\n    }, [])\n\n    const createTask = async (body: ITask) => {\n        try {\n            const response = await new TaskApi().createNewTask(body)\n            const newArr = [...tasks, response]\n            setTask(newArr)\n\n        } catch (e) {\n            console.log('Error on POST query', e)\n        }\n    }\n    const fetchTask = async (): Promise<ITask[] | void> => {\n        try {\n            const response: any = await new TaskApi().getAllTasks()\n            setTask(response)\n        } catch (e) {\n            console.log('qwe', e)\n        }\n    }\n\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value\n        setInput(value)\n    }\n\n    const clickHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        const body: ITask = {\n            title: input,\n            isCheck: false\n        }\n        createTask(body)\n    }\n    return (\n        <div className='task-add'>\n            <input type=\"text\" placeholder='Title' onChange={changeHandler}/>\n            <button type='submit' onClick={clickHandler}>Add</button>\n        </div>\n    )\n}\nexport default TaskAdd"]},"metadata":{},"sourceType":"module"}