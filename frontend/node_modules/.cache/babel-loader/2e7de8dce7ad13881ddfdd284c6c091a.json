{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodosContainer } from '../todos-container/todos-container';\nimport { TodoFormContainer } from '../todo-form/todo-form-container';\nimport { fetchTodos } from '../../store/action-creators/action-creator';\nimport { store } from '../../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const dispatch = useDispatch(); // @ts-ignore\n\n  const {\n    books\n  } = useSelector(state => state.books);\n  console.log(books);\n  const unsubscribe = store.subscribe(() => {\n    const {\n      books\n    } = store.getState();\n  }); // const newTaskHandler = (newTask: ITodo) => {\n  //   setTodos([newTask, ...todos])\n  // }\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoFormContainer\n    /* newTaskHandler={newTaskHandler} */\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TodosContainer, {\n      fetchTodos: fetchTodos,\n      todos: books,\n      setTodos: setTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"/njlvlOepehUfDbbhvdaS6Tbbwo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","TodosContainer","TodoFormContainer","fetchTodos","store","MainContainer","todos","setTodos","dispatch","books","state","console","log","unsubscribe","subscribe","getState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,cAAT,QAA+B,oCAA/B;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,UAAT,QAA2B,4CAA3B;AACA,SAASC,KAAT,QAAsB,aAAtB;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAmB;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAU,EAAV,CAAlC;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B,CAF8C,CAI9C;;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAYT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAA7B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAMI,WAAW,GAAGT,KAAK,CAACU,SAAN,CAAgB,MAAM;AACxC,UAAM;AAAEL,MAAAA;AAAF,QAAYL,KAAK,CAACW,QAAN,EAAlB;AACD,GAFmB,CAApB,CAP8C,CAU9C;AACA;AACA;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACU;AAAA,4BACI,QAAC;AAAkB;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AACI,MAAA,UAAU,EAAEA,UADhB;AAEI,MAAA,KAAK,EAAEM,KAFX;AAGI,MAAA,QAAQ,EAAEF;AAHd;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADV;AAUD,CA1BM;;GAAMF,a;UAEMN,W,EAGCC,W;;;KALPK,a","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosContainer } from '../todos-container/todos-container'\nimport { ITodo } from '../../models/interface/interface'\nimport { TodoFormContainer } from '../todo-form/todo-form-container'\nimport { fetchTodos } from '../../store/action-creators/action-creator'\nimport { store } from '../../store'\n\nexport const MainContainer = (): JSX.Element => {\n  const [todos, setTodos] = useState<ITodo[]>([])\n  const dispatch = useDispatch()\n\n  // @ts-ignore\n  const { books } = useSelector(state => state.books)\n  console.log(books)\n  const unsubscribe = store.subscribe(() => {\n    const { books } = store.getState()\n  })\n  // const newTaskHandler = (newTask: ITodo) => {\n  //   setTodos([newTask, ...todos])\n  // }\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [])\n  return (\n            <>\n                <TodoFormContainer /* newTaskHandler={newTaskHandler} */ />\n                <TodosContainer\n                    fetchTodos={fetchTodos}\n                    todos={books}\n                    setTodos={setTodos}\n                />\n            </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}