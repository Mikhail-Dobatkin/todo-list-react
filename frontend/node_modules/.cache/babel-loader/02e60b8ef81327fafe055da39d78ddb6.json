{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainContainer = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n\n  const fetchTodos = async () => {\n    try {\n      //todo typisation utility types\n      const getTodos = await TodoService.getAllTodos();\n      console.log(getTodos.data);\n      setTodos(getTodos.data);\n    } catch (e) {\n      console.log('Error in fetchTodos', e);\n    }\n  };\n\n  const newTaskHandler = newTask => {\n    setTodos([newTask, ...todos]);\n  };\n\n  const changeTodoHandler = (changeTodo, id) => {\n    todos.map((todo, index) => {\n      if (id === todo._id) {\n        const prevArr = todos.splice(index, 1, changeTodo);\n        const arr = [...todos];\n        setTodos(arr);\n      } else {\n        console.log('не сработало');\n      }\n    });\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const todo = await TodoService.deleteTodo(id);\n      const newArrTodos = todos.filter(task => {\n        return task._id !== todo._id;\n      });\n      setTodos(newArrTodos);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  const btnTodoRemove = async event => {\n    event.preventDefault();\n    const id = event.target.id;\n\n    try {\n      await deleteTodo(id);\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n\n    console.log(id);\n  };\n\n  const prevTodoValue = (id, value) => {\n    const body = {\n      _id: id,\n      title: value\n    };\n    console.log(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosContainer, {\n    fetchTodos: fetchTodos,\n    todos: todos,\n    btnTodoRemove: btnTodoRemove,\n    prevTodoValue: prevTodoValue,\n    changeTodoHandler: changeTodoHandler,\n    newTaskHandler: newTaskHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MainContainer, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/main-container/main-container.tsx"],"names":["React","useState","TodosContainer","TodoService","MainContainer","todos","setTodos","fetchTodos","getTodos","getAllTodos","console","log","data","e","newTaskHandler","newTask","changeTodoHandler","changeTodo","id","map","todo","index","_id","prevArr","splice","arr","deleteTodo","newArrTodos","filter","task","btnTodoRemove","event","preventDefault","target","prevTodoValue","value","body","title"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport TodosContainer from \"../todos-container/todos-container\";\nimport {ITask} from \"../../models/interface/interface\";\nimport TodoService from \"../../service/todoService/TodoService\";\n\n\n\nexport const MainContainer = (): JSX.Element => {\n\n    const [todos, setTodos] = useState<ITask[]>([])\n\n    const fetchTodos = async (): Promise<void> => {\n        try {\n            //todo typisation utility types\n            const getTodos: any = await TodoService.getAllTodos()\n            console.log(getTodos.data)\n            setTodos(getTodos.data)\n        } catch (e) {\n            console.log('Error in fetchTodos', e)\n        }\n    }\n\n\n    const newTaskHandler = (newTask: ITask) => {\n        setTodos([newTask, ...todos])\n    }\n\n    const changeTodoHandler = (changeTodo: ITask, id: string) => {\n        todos.map((todo, index) => {\n            if(id === todo._id) {\n                const prevArr = todos.splice(index, 1, changeTodo)\n                const arr = [...todos]\n                setTodos(arr)\n            } else {\n                console.log('не сработало')\n            }\n        })\n    }\n\n    const deleteTodo = async (id: string): Promise<ITask | void> => {\n        try {\n            const todo: ITask = await TodoService.deleteTodo(id)\n            const newArrTodos = todos.filter(task => {\n                return task._id !== todo._id\n            })\n            setTodos(newArrTodos)\n        } catch (e) {\n            console.log('Error in function deleteTodo', e)\n        }\n    }\n    const btnTodoRemove = async (event: any) => {\n        event.preventDefault()\n            const id = event.target.id\n            try {\n                await deleteTodo(id)\n            } catch (e) {\n                console.log('Error in function deleteTodo', e)\n            }\n            console.log(id)\n\n    }\n\n    const prevTodoValue = (id: string, value: string) => {\n        const body = {\n            _id: id,\n            title: value\n        }\n        console.log(body)\n    }\n\n\n\n    return (\n            <TodosContainer fetchTodos={fetchTodos}\n                            todos={todos}\n                            btnTodoRemove={btnTodoRemove}\n                            prevTodoValue={prevTodoValue}\n                            changeTodoHandler={changeTodoHandler}\n                            newTaskHandler={newTaskHandler}\n                             />\n    )\n}"]},"metadata":{},"sourceType":"module"}