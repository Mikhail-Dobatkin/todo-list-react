{"ast":null,"code":"import axios from \"axios\";\nconst http = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nclass TaskApi {\n  constructor() {\n    this.createNewTask = async body => {\n      try {\n        const response = await http.post('/addTask', body);\n        console.log(response);\n        const result = response.data.data;\n        return result;\n      } catch (e) {\n        console.log('Error POST query', e);\n      }\n    };\n  }\n\n}\n\nTaskApi.getAllTasks = async () => {\n  try {\n    const response = await http.get('/allTasks');\n    return await response.data.data;\n  } catch (e) {\n    console.log('Error GET query', e);\n  }\n};\n\nexport default TaskApi;","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/components/TaskApi/TaskApi.ts"],"names":["axios","http","create","baseURL","headers","TaskApi","createNewTask","body","response","post","console","log","result","data","e","getAllTasks","get"],"mappings":"AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAGA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAa;AACtBC,EAAAA,OAAO,EAAE,uBADa;AAEtBC,EAAAA,OAAO,EAAE;AAAC,oBAAgB;AAAjB;AAFa,CAAb,CAAb;;AAKA,MAAMC,OAAN,CAAc;AAAA;AAAA,SAUVC,aAVU,GAUM,MAAOC,IAAP,IAAuB;AAClC,UAAI;AACA,cAAMC,QAAuB,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU,UAAV,EAAsBF,IAAtB,CAAtC;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,cAAMI,MAAM,GAAGJ,QAAQ,CAACK,IAAT,CAAcA,IAA7B;AACA,eAAOD,MAAP;AACH,OALD,CAKE,OAAOE,CAAP,EAAU;AACRJ,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCG,CAAhC;AACH;AACL,KAnBS;AAAA;;AAAA;;AAART,O,CAEMU,W,GAAc,YAAqC;AACvD,MAAI;AACA,UAAMP,QAAuB,GAAG,MAAMP,IAAI,CAACe,GAAL,CAAS,WAAT,CAAtC;AACA,WAAO,MAAMR,QAAQ,CAACK,IAAT,CAAcA,IAA3B;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BG,CAA/B;AACH;AACR,C;;AAaD,eAAeT,OAAf","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\nimport {ITask} from \"../interface/interface\";\n\nconst http = axios.create({\n    baseURL: 'http://localhost:8080',\n    headers: {'Content-Type': 'application/json'}\n})\n\nclass TaskApi {\n\n     static getAllTasks = async (): Promise<ITask[] | void> => {\n        try {\n            const response: AxiosResponse = await http.get('/allTasks')\n            return await response.data.data\n        } catch (e) {\n            console.log('Error GET query', e)\n        }\n}\n    createNewTask = async (body: ITask) => {\n         try {\n             const response: AxiosResponse = await http.post('/addTask', body)\n             console.log(response)\n             const result = response.data.data\n             return result\n         } catch (e) {\n             console.log('Error POST query', e)\n         }\n    }\n}\n\nexport default TaskApi"]},"metadata":{},"sourceType":"module"}