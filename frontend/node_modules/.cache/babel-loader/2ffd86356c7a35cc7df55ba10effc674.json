{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TodosComponent } from './todos-component';\nimport './style.css';\nimport { useDispatch } from 'react-redux'; // import { changeTodo, deleteBook } from '../../store/action-creators/action-creator'\n\nimport { deleteTask, changeTodo } from '../../store/action-creators/action';\nimport { store } from '../../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodosContainer = _ref => {\n  _s();\n\n  let {\n    todos,\n    setTodos\n  } = _ref;\n  const dispatch = useDispatch(); // const changeTodoState = (changedTodo: any) => {\n  //   todos.map((todo: ITodo) => {\n  //     if (changedTodo.id === todo._id) {\n  //       todo.isCheck = !todo.isCheck\n  //     }\n  //     return todo\n  //   })\n  //   setTodos([...todos])\n  // }\n\n  const toggleIsCheck = todo => {\n    //   try {\n    const {\n      _id,\n      title,\n      isCheck\n    } = todo;\n    const body = {\n      _id,\n      title,\n      isCheck: !isCheck\n    };\n    console.log(body);\n    dispatch(changeTodo(body)); //     await TodoService.updateTodo(body)\n    //\n    //     changeTodoState(body)\n    //   } catch (e) {\n    //     console.log('Error in toggleIsCheck function', e)\n    //   }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      // const todo: ITodo = await TodoService.deleteTodo(id)\n      // dispatch(deleteBook(id))\n      dispatch(deleteTask(id)); // const newArrTodos = todos.filter(task => {\n      //   return task._id !== todo._id\n      // })\n\n      console.log(store.getState()); // setTodos(newArrTodos)\n    } catch (e) {\n      console.log('Error in function deleteTodo', e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodosComponent, {\n    todos: todos,\n    deleteTodo: deleteTodo,\n    toggleIsCheck: toggleIsCheck\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodosContainer, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","TodosComponent","useDispatch","deleteTask","changeTodo","store","TodosContainer","todos","setTodos","dispatch","toggleIsCheck","todo","_id","title","isCheck","body","console","log","deleteTodo","id","getState","e"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oCAAvC;AACA,SAASC,KAAT,QAAsB,aAAtB;;AASA,OAAO,MAAMC,cAAc,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAyD;AACtF,QAAMC,QAAQ,GAAGP,WAAW,EAA5B,CADsF,CAGtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMQ,aAAa,GAAIC,IAAD,IAAiB;AACvC;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,QAA0BH,IAAhC;AACA,UAAMI,IAAI,GAAG;AACXH,MAAAA,GADW;AAEXC,MAAAA,KAFW;AAGXC,MAAAA,OAAO,EAAE,CAACA;AAHC,KAAb;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAN,IAAAA,QAAQ,CAACL,UAAU,CAACW,IAAD,CAAX,CAAR,CATqC,CAUvC;AACA;AACA;AACA;AACA;AACA;AACC,GAhBD;;AAkBA,QAAMG,UAAU,GAAG,MAAOC,EAAP,IAA2C;AAC5D,QAAI;AACF;AACA;AACAV,MAAAA,QAAQ,CAACN,UAAU,CAACgB,EAAD,CAAX,CAAR,CAHE,CAIF;AACA;AACA;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACe,QAAN,EAAZ,EAPE,CAQF;AACD,KATD,CASE,OAAOC,CAAP,EAAU;AACVL,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CI,CAA5C;AACD;AACF,GAbD;;AAeA,sBACM,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEd,KAAvB;AAA8B,IAAA,UAAU,EAAEW,UAA1C;AAAsD,IAAA,aAAa,EAAER;AAArE;AAAA;AAAA;AAAA;AAAA,UADN;AAGD,CAjDM;;GAAMJ,c;UACMJ,W;;;KADNI,c","sourcesContent":["import React from 'react'\nimport TodoService from '../../service/todoService/TodoService'\nimport { TodosComponent } from './todos-component'\nimport { ITodo } from '../../models/interface/interface'\nimport './style.css'\nimport { useDispatch } from 'react-redux'\n// import { changeTodo, deleteBook } from '../../store/action-creators/action-creator'\nimport { deleteTask, changeTodo } from '../../store/action-creators/action'\nimport { store } from '../../store'\nimport { TodoActionTypes } from '../../store/types/typesTodo'\n\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    todos: ITodo[]\n    setTodos: (body: ITodo[]) => void\n}\n\nexport const TodosContainer = ({ todos, setTodos }: TodosContainerProp): JSX.Element => {\n  const dispatch = useDispatch()\n\n  // const changeTodoState = (changedTodo: any) => {\n  //   todos.map((todo: ITodo) => {\n  //     if (changedTodo.id === todo._id) {\n  //       todo.isCheck = !todo.isCheck\n  //     }\n  //     return todo\n  //   })\n  //   setTodos([...todos])\n  // }\n\n  const toggleIsCheck = (todo: ITodo) => {\n  //   try {\n    const { _id, title, isCheck } = todo\n    const body = {\n      _id,\n      title,\n      isCheck: !isCheck\n    }\n    console.log(body)\n    dispatch(changeTodo(body))\n  //     await TodoService.updateTodo(body)\n  //\n  //     changeTodoState(body)\n  //   } catch (e) {\n  //     console.log('Error in toggleIsCheck function', e)\n  //   }\n  }\n\n  const deleteTodo = async (id: ITodo['_id']): Promise<void> => {\n    try {\n      // const todo: ITodo = await TodoService.deleteTodo(id)\n      // dispatch(deleteBook(id))\n      dispatch(deleteTask(id))\n      // const newArrTodos = todos.filter(task => {\n      //   return task._id !== todo._id\n      // })\n      console.log(store.getState())\n      // setTodos(newArrTodos)\n    } catch (e) {\n      console.log('Error in function deleteTodo', e)\n    }\n  }\n\n  return (\n        <TodosComponent todos={todos} deleteTodo={deleteTodo} toggleIsCheck={toggleIsCheck} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}