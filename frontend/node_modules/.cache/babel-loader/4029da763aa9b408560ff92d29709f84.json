{"ast":null,"code":"var _jsxFileName = \"/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodosContainer = _ref => {\n  _s();\n\n  let {\n    fetchTodos,\n    newTaskHandler,\n    todos,\n    btnTodoRemove,\n    changeTodoHandler,\n    prevTodoValue\n  } = _ref;\n  const [prevValueTitle, setTodoTitlePrev] = useState('');\n  const [indexTodoChanged, setTodoId] = useState('');\n  useEffect(() => {\n    fetchTodos();\n  }, []); // const btnEditTodo = (e: Event) => {\n\n  const btnEditTodo = id => {\n    e.preventDefault();\n\n    if ('id' in e.target) {\n      const id = e.target.id;\n      todos.forEach(todo => {\n        if (todo._id === id) {\n          const value = todo.title;\n          prevTodoValue(id, value);\n          setTodoTitlePrev(value);\n          setTodoId(id);\n        }\n      });\n    }\n  };\n\n  const toggleIsCheck = async (body, id) => {\n    try {\n      const updatedTodo = await TodoService.updateTodo(body, id);\n      changeTodoHandler(body, id);\n      console.log(updatedTodo, 'I`M FUNCTION UPDATE');\n    } catch (e) {\n      console.log('Error in toggleIsCheck function', e);\n    }\n  };\n\n  const todoIsCheck = async e => {\n    todos.findIndex((todo, index) => {\n      console.log(todo);\n      const {\n        title,\n        _id,\n        isCheck\n      } = todo;\n      const body = {\n        id: _id,\n        title: title,\n        isCheck: !isCheck\n      };\n      toggleIsCheck(body, body.id);\n\n      try {} catch (e) {\n        console.log('Error on todoIsCheck function', e);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      newTaskHandler: newTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodosComponent, {\n      todos: todos,\n      btnTodoRemove: btnTodoRemove,\n      btnEditTodo: btnEditTodo,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupContainer, {\n      changeTodoHandler: changeTodoHandler,\n      prevTodoValue: prevTodoValue,\n      indexTodoChanged: indexTodoChanged,\n      todoIsCheck: todoIsCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosContainer, \"/5H482R1UD8kwforEMR+RcifBcs=\");\n\n_c = TodosContainer;\nexport default TodosContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosContainer\");","map":{"version":3,"sources":["/home/user/WebstormProjects/todo-list-react/frontend/src/containers/todos-container/todos-container.tsx"],"names":["React","useEffect","useState","TodoService","PopupContainer","TodosComponent","TodoForm","TodosContainer","fetchTodos","newTaskHandler","todos","btnTodoRemove","changeTodoHandler","prevTodoValue","prevValueTitle","setTodoTitlePrev","indexTodoChanged","setTodoId","btnEditTodo","id","e","preventDefault","target","forEach","todo","_id","value","title","toggleIsCheck","body","updatedTodo","updateTodo","console","log","todoIsCheck","findIndex","index","isCheck"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoService from \"../../service/todoService/TodoService\";\nimport { PopupContainer } from '../todo-edit-popup/popup-container';\nimport { TodosComponent } from \"./todos-component\";\nimport { TodoForm } from \"../todo-form/todo-form\";\nimport { ITask } from \"../../models/interface/interface\";\nimport './style.css';\n\ninterface Event {\n    target: EventTarget | Element\n    preventDefault(): void\n}\ninterface TodosContainerProp {\n    fetchTodos: () => void\n    newTaskHandler: (body: ITask) => void\n    todos: ITask[]\n    btnTodoRemove: (e: React.MouseEvent<HTMLButtonElement>) => Promise<void>\n    changeTodoHandler: (body: ITask, id: string) => void\n    prevTodoValue: (id: string, value: string) => void\n}\n\nconst TodosContainer = ({\n        fetchTodos,\n        newTaskHandler,\n        todos,\n        btnTodoRemove,\n        changeTodoHandler,\n        prevTodoValue\n        }: TodosContainerProp): JSX.Element => {\n\n    const [prevValueTitle, setTodoTitlePrev] = useState<string>('')\n    const [indexTodoChanged, setTodoId] = useState<string>('')\n\n    useEffect( () => {\n        fetchTodos()\n    }, [])\n\n    // const btnEditTodo = (e: Event) => {\n    const btnEditTodo = (id: string) => {\n\n        e.preventDefault()\n        if('id' in e.target) {\n            const id = e.target.id\n            todos.forEach(todo => {\n                if (todo._id === id) {\n                    const value = todo.title\n                    prevTodoValue(id, value)\n                    setTodoTitlePrev(value)\n                    setTodoId(id)\n                }\n            })\n        }\n    }\n\n    const toggleIsCheck = async (body: ITask, id: string): Promise<void> => {\n        try {\n            const updatedTodo: ITask = await TodoService.updateTodo(body, id)\n            changeTodoHandler(body, id)\n            console.log(updatedTodo, 'I`M FUNCTION UPDATE')\n        } catch (e) {\n            console.log('Error in toggleIsCheck function', e)\n        }\n    };\n\n    const todoIsCheck = async (e: React.ChangeEvent<HTMLInputElement>) => {\n\n        todos.findIndex((todo, index) => {\n            console.log(todo)\n            const {title, _id, isCheck} = todo\n            const body: any = {\n                id: _id,\n                title: title,\n                isCheck: !isCheck\n            }\n            toggleIsCheck(body, body.id)\n            try {\n\n            } catch (e) {\n                console.log('Error on todoIsCheck function', e)\n            }\n        })\n    }\n\n    return (\n        <>\n            <TodoForm newTaskHandler={newTaskHandler} />\n            <TodosComponent todos={todos} btnTodoRemove={btnTodoRemove} btnEditTodo={btnEditTodo} todoIsCheck={todoIsCheck} />\n            <PopupContainer changeTodoHandler={changeTodoHandler} prevTodoValue={prevTodoValue} indexTodoChanged={indexTodoChanged} todoIsCheck={todoIsCheck} />\n        </>\n    )\n}\n\nexport default TodosContainer"]},"metadata":{},"sourceType":"module"}